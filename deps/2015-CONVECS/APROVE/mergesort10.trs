(VAR X Y N M L1 L2 L)
(RULES
 d10 -> s (s (s (s (s (s (s (s (s (s (d0))))))))))
 lte (d0, s (N)) -> true
 lte (s (N), d0) -> false
 lte (d0, d0) -> true
 lte (s (N), s (M)) -> lte (N, M)
 plus (d0, N) -> N
 plus (s (N), M) -> s (plus (N, M))
 times (d0, N) -> d0
 times (s (N), M) -> plus (M, times (N, M))
 rev (s (N)) -> cons (s (N), rev (N))
 rev (d0) -> cons (d0, nil)
 merge (nil, L) -> L
 merge (L, nil) -> L
 merge (cons (X, L1), cons (Y, L2)) -> cons (X, merge (L1, cons (Y, L2))) | REC_EqBool (lte (X, Y), true) -> REC_True
 merge (cons (X, L1), cons (Y, L2)) -> cons (Y, merge (cons (X, L1), L2)) | REC_EqBool (lte (X, Y), false) -> REC_True
 split (cons (X, cons (Y, L))) -> pair (cons (X, p1 (split (L))), cons (Y, p2 (split (L))))
 split (nil) -> pair (nil, nil)
 split (cons (X, nil)) -> pair (cons (X, nil), nil)
 mergesort (nil) -> nil
 mergesort (cons (X, nil)) -> cons (X, nil)
 mergesort (cons (X, cons (Y, L))) -> merge (mergesort (cons (X, p1 (split (L)))), mergesort (cons (Y, p2 (split (L)))))
 p1 (pair (L1, L2)) -> L1
 p2 (pair (L1, L2)) -> L2
)
(VAR REC_M REC_N REC_X REC_Y REC_X1 REC_Y1 REC_X2 REC_Y2)
(RULES
 REC_Not (REC_False) -> REC_True
 REC_Not (REC_True) -> REC_False
 REC_And (REC_False, REC_False) -> REC_False
 REC_And (REC_False, REC_True) -> REC_False
 REC_And (REC_True, REC_False) -> REC_False
 REC_And (REC_True, REC_True) -> REC_True
 REC_Ne (REC_Zero, REC_Zero) -> REC_False
 REC_Ne (REC_Zero, REC_Succ (REC_M)) -> REC_True
 REC_Ne (REC_Succ (REC_M), REC_Zero) -> REC_True
 REC_Ne (REC_Succ (REC_M), REC_Succ (REC_N)) -> REC_Ne (REC_M, REC_N)
 REC_RankBool (true) -> REC_Zero
 REC_EqBool (true, true) -> REC_True
 REC_RankBool (false) -> REC_Succ (REC_Zero)
 REC_EqBool (false, false) -> REC_True
 REC_RankNat (d0) -> REC_Zero
 REC_EqNat (d0, d0) -> REC_True
 REC_RankNat (s (REC_X1)) -> REC_Succ (REC_Zero)
 REC_EqNat (s (REC_X1), s (REC_Y1)) -> REC_EqNat (REC_X1, REC_Y1)
 REC_RankNatList (nil) -> REC_Zero
 REC_EqNatList (nil, nil) -> REC_True
 REC_RankNatList (cons (REC_X1, REC_X2)) -> REC_Succ (REC_Zero)
 REC_EqNatList (cons (REC_X1, REC_X2), cons (REC_Y1, REC_Y2)) -> REC_And (REC_EqNat (REC_X1, REC_Y1), REC_EqNatList (REC_X2, REC_Y2))
 REC_RankListPair (pair (REC_X1, REC_X2)) -> REC_Zero
 REC_EqListPair (pair (REC_X1, REC_X2), pair (REC_Y1, REC_Y2)) -> REC_And (REC_EqNatList (REC_X1, REC_Y1), REC_EqNatList (REC_X2, REC_Y2))
 REC_EqBool (REC_X, REC_Y) -> REC_False | REC_Ne (REC_RankBool (REC_X), REC_RankBool (REC_Y)) -> REC_True
 REC_EqNat (REC_X, REC_Y) -> REC_False | REC_Ne (REC_RankNat (REC_X), REC_RankNat (REC_Y)) -> REC_True
 REC_EqNatList (REC_X, REC_Y) -> REC_False | REC_Ne (REC_RankNatList (REC_X), REC_RankNatList (REC_Y)) -> REC_True
 REC_EqListPair (REC_X, REC_Y) -> REC_False | REC_Ne (REC_RankListPair (REC_X), REC_RankListPair (REC_Y)) -> REC_True
)
