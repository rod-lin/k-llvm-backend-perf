(VAR L N N_prime B B_prime B1 B2 B3 B4 B5 B6 B7 B8 B9 B10 B11 B12 B13 B14 B15 B16 B17 B18 B19 B20 B21 B22 B23 B24 B25 B26 B27 B28 B29 B30 B31 B32 B_prime1 B_prime2 B_prime3 B_prime4 B_prime5 B_prime6 B_prime7 B_prime8 B_second1 B_second2 B_second3 B_second4 B_second5 B_second6 B_second7 B_second8 Bcarry O O_prime O1 O2 O3 O4 O_prime1 O_prime2 O_prime3 O_prime4 O_second1 O_second2 O_second3 O_second4 Ocarry Opat O1U O1L O2U O2L O3U O3L O4U O4L O11L O11U O12L O12U O21L O21U O22L O22U H H_prime H_second1 H_second2 H_second3 H_second4 H11L H11U H12L H12U H21L H21U H22L H22U Hcarry W W_prime W1 W2 W_prime1 W_prime2 W11 W12 W21 W22 Wcarry P P_prime P1 P2 P3 K M M_prime S)
(RULES
 notBool (false) -> true
 notBool (true) -> false
 andBool (false, L) -> false
 andBool (true, L) -> L
 orBool (false, L) -> L
 orBool (true, L) -> true
 xorBool (false, L) -> L
 xorBool (true, L) -> notBool (L)
 notBit (x0) -> x1
 notBit (x1) -> x0
 andBit (B, x0) -> x0
 andBit (B, x1) -> B
 orBit (B, x0) -> B
 orBit (B, x1) -> x1
 xorBit (B, x0) -> B
 xorBit (B, x1) -> notBit (B)
 x00 -> buildOctet (x0, x0, x0, x0, x0, x0, x0, x0)
 x01 -> buildOctet (x0, x0, x0, x0, x0, x0, x0, x1)
 x0000 -> buildHalf (x00, x00)
 HalfU (buildBlock (O1, O2, O3, O4)) -> buildHalf (O1, O2)
 HalfL (buildBlock (O1, O2, O3, O4)) -> buildHalf (O3, O4)
 eqBit (x0, x0) -> true
 eqBit (x0, x1) -> false
 eqBit (x1, x0) -> false
 eqBit (x1, x1) -> true
 eqOctet (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8)) -> andBool (eqBit (B1, B_prime1), andBool (eqBit (B2, B_prime2), andBool (eqBit (B3, B_prime3), andBool (eqBit (B4, B_prime4), andBool (eqBit (B5, B_prime5), andBool (eqBit (B6, B_prime6), andBool (eqBit (B7, B_prime7), eqBit (B8, B_prime8))))))))
 eqOctetSum (buildOctetSum (B, O), buildOctetSum (B_prime, O_prime)) -> andBool (eqBit (B, B_prime), eqOctet (O, O_prime))
 eqHalf (buildHalf (O1, O2), buildHalf (O_prime1, O_prime2)) -> andBool (eqOctet (O1, O_prime1), eqOctet (O2, O_prime2))
 eqHalfSum (buildHalfSum (B, H), buildHalfSum (B_prime, H_prime)) -> andBool (eqBit (B, B_prime), eqHalf (H, H_prime))
 eqBlock (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) -> andBool (andBool (eqOctet (O1, O_prime1), eqOctet (O2, O_prime2)), andBool (eqOctet (O3, O_prime3), eqOctet (O4, O_prime4)))
 eqBlockSum (buildBlockSum (B, W), buildBlockSum (B_prime, W_prime)) -> andBool (eqBit (B, B_prime), eqBlock (W, W_prime))
 eqPair (buildPair (W1, W2), buildPair (W_prime1, W_prime2)) -> andBool (eqBlock (W1, W_prime1), eqBlock (W2, W_prime2))
 addBit (B, B_prime, Bcarry) -> xorBit (xorBit (B, B_prime), Bcarry)
 carBit (B, B_prime, Bcarry) -> orBit (andBit (andBit (B, B_prime), notBit (Bcarry)), andBit (orBit (B, B_prime), Bcarry))
 addOctetSum (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8), Bcarry) -> addOctet8 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, B7, B_prime7, B8, B_prime8, Bcarry)
 addOctet8 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, B7, B_prime7, B8, B_prime8, Bcarry) -> addOctet7 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, B7, B_prime7, carBit (B8, B_prime8, Bcarry), addBit (B8, B_prime8, Bcarry))
 addOctet7 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, B7, B_prime7, Bcarry, B_second8) -> addOctet6 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, carBit (B7, B_prime7, Bcarry), addBit (B7, B_prime7, Bcarry), B_second8)
 addOctet6 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, Bcarry, B_second7, B_second8) -> addOctet5 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, carBit (B6, B_prime6, Bcarry), addBit (B6, B_prime6, Bcarry), B_second7, B_second8)
 addOctet5 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, Bcarry, B_second6, B_second7, B_second8) -> addOctet4 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, carBit (B5, B_prime5, Bcarry), addBit (B5, B_prime5, Bcarry), B_second6, B_second7, B_second8)
 addOctet4 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, Bcarry, B_second5, B_second6, B_second7, B_second8) -> addOctet3 (B1, B_prime1, B2, B_prime2, B3, B_prime3, carBit (B4, B_prime4, Bcarry), addBit (B4, B_prime4, Bcarry), B_second5, B_second6, B_second7, B_second8)
 addOctet3 (B1, B_prime1, B2, B_prime2, B3, B_prime3, Bcarry, B_second4, B_second5, B_second6, B_second7, B_second8) -> addOctet2 (B1, B_prime1, B2, B_prime2, carBit (B3, B_prime3, Bcarry), addBit (B3, B_prime3, Bcarry), B_second4, B_second5, B_second6, B_second7, B_second8)
 addOctet2 (B1, B_prime1, B2, B_prime2, Bcarry, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8) -> addOctet1 (B1, B_prime1, carBit (B2, B_prime2, Bcarry), addBit (B2, B_prime2, Bcarry), B_second3, B_second4, B_second5, B_second6, B_second7, B_second8)
 addOctet1 (B1, B_prime1, Bcarry, B_second2, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8) -> addOctet0 (carBit (B1, B_prime1, Bcarry), addBit (B1, B_prime1, Bcarry), B_second2, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8)
 addOctet0 (Bcarry, B_second1, B_second2, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8) -> buildOctetSum (Bcarry, buildOctet (B_second1, B_second2, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8))
 dropCarryOctetSum (buildOctetSum (Bcarry, O)) -> O
 addOctet (O, O_prime) -> dropCarryOctetSum (addOctetSum (O, O_prime, x0))
 addHalfSum (buildHalf (O1, O2), buildHalf (O_prime1, O_prime2)) -> addHalf2 (O1, O_prime1, O2, O_prime2)
 addHalf2 (O1, O_prime1, O2, O_prime2) -> addHalf1 (O1, O_prime1, addOctetSum (O2, O_prime2, x0))
 addHalf1 (O1, O_prime1, buildOctetSum (B, O_second2)) -> addHalf0 (addOctetSum (O1, O_prime1, B), O_second2)
 addHalf0 (buildOctetSum (B, O_second1), O_second2) -> buildHalfSum (B, buildHalf (O_second1, O_second2))
 dropCarryHalfSum (buildHalfSum (B, H)) -> H
 addHalf (H, H_prime) -> dropCarryHalfSum (addHalfSum (H, H_prime))
 addHalfOctet (O, H) -> addHalf (buildHalf (x00, O), H)
 addHalfOctets (O, O_prime) -> addHalf (buildHalf (x00, O), buildHalf (x00, O_prime))
 addBlockSum (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) -> addBlock4 (O1, O_prime1, O2, O_prime2, O3, O_prime3, O4, O_prime4)
 addBlock4 (O1, O_prime1, O2, O_prime2, O3, O_prime3, O4, O_prime4) -> addBlock3 (O1, O_prime1, O2, O_prime2, O3, O_prime3, addOctetSum (O4, O_prime4, x0))
 addBlock3 (O1, O_prime1, O2, O_prime2, O3, O_prime3, buildOctetSum (Bcarry, O_second4)) -> addBlock2 (O1, O_prime1, O2, O_prime2, addOctetSum (O3, O_prime3, Bcarry), O_second4)
 addBlock2 (O1, O_prime1, O2, O_prime2, buildOctetSum (Bcarry, O_second3), O_second4) -> addBlock1 (O1, O_prime1, addOctetSum (O2, O_prime2, Bcarry), O_second3, O_second4)
 addBlock1 (O1, O_prime1, buildOctetSum (Bcarry, O_second2), O_second3, O_second4) -> addBlock0 (addOctetSum (O1, O_prime1, Bcarry), O_second2, O_second3, O_second4)
 addBlock0 (buildOctetSum (Bcarry, O_second1), O_second2, O_second3, O_second4) -> buildBlockSum (Bcarry, buildBlock (O_second1, O_second2, O_second3, O_second4))
 dropCarryBlockSum (buildBlockSum (Bcarry, W)) -> W
 addBlock (W, W_prime) -> dropCarryBlockSum (addBlockSum (W, W_prime))
 addBlockHalf (buildHalf (O1, O2), W) -> addBlock (buildBlock (x00, x00, O1, O2), W)
 addBlockHalves (buildHalf (O1, O2), buildHalf (O_prime1, O_prime2)) -> addBlock (buildBlock (x00, x00, O1, O2), buildBlock (x00, x00, O_prime1, O_prime2))
 leftOctet1 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (B2, B3, B4, B5, B6, B7, B8, x0)
 leftOctet2 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (B3, B4, B5, B6, B7, B8, x0, x0)
 leftOctet3 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (B4, B5, B6, B7, B8, x0, x0, x0)
 leftOctet4 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (B5, B6, B7, B8, x0, x0, x0, x0)
 leftOctet5 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (B6, B7, B8, x0, x0, x0, x0, x0)
 leftOctet6 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (B7, B8, x0, x0, x0, x0, x0, x0)
 leftOctet7 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (B8, x0, x0, x0, x0, x0, x0, x0)
 rightOctet1 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (x0, B1, B2, B3, B4, B5, B6, B7)
 rightOctet2 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (x0, x0, B1, B2, B3, B4, B5, B6)
 rightOctet3 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (x0, x0, x0, B1, B2, B3, B4, B5)
 rightOctet4 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (x0, x0, x0, x0, B1, B2, B3, B4)
 rightOctet5 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (x0, x0, x0, x0, x0, B1, B2, B3)
 rightOctet6 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (x0, x0, x0, x0, x0, x0, B1, B2)
 rightOctet7 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) -> buildOctet (x0, x0, x0, x0, x0, x0, x0, B1)
 mulOctet (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), O_prime) -> mulOctet1 (B1, B2, B3, B4, B5, B6, B7, B8, O_prime, x0000)
 mulOctet1 (x0, B2, B3, B4, B5, B6, B7, B8, O_prime, H) -> mulOctet2 (B2, B3, B4, B5, B6, B7, B8, O_prime, H)
 mulOctet1 (x1, B2, B3, B4, B5, B6, B7, B8, O_prime, H) -> mulOctet2 (B2, B3, B4, B5, B6, B7, B8, O_prime, mulOctetA (H, rightOctet1 (O_prime), leftOctet7 (O_prime)))
 mulOctet2 (x0, B3, B4, B5, B6, B7, B8, O_prime, H) -> mulOctet3 (B3, B4, B5, B6, B7, B8, O_prime, H)
 mulOctet2 (x1, B3, B4, B5, B6, B7, B8, O_prime, H) -> mulOctet3 (B3, B4, B5, B6, B7, B8, O_prime, mulOctetA (H, rightOctet2 (O_prime), leftOctet6 (O_prime)))
 mulOctet3 (x0, B4, B5, B6, B7, B8, O_prime, H) -> mulOctet4 (B4, B5, B6, B7, B8, O_prime, H)
 mulOctet3 (x1, B4, B5, B6, B7, B8, O_prime, H) -> mulOctet4 (B4, B5, B6, B7, B8, O_prime, mulOctetA (H, rightOctet3 (O_prime), leftOctet5 (O_prime)))
 mulOctet4 (x0, B5, B6, B7, B8, O_prime, H) -> mulOctet5 (B5, B6, B7, B8, O_prime, H)
 mulOctet4 (x1, B5, B6, B7, B8, O_prime, H) -> mulOctet5 (B5, B6, B7, B8, O_prime, mulOctetA (H, rightOctet4 (O_prime), leftOctet4 (O_prime)))
 mulOctet5 (x0, B6, B7, B8, O_prime, H) -> mulOctet6 (B6, B7, B8, O_prime, H)
 mulOctet5 (x1, B6, B7, B8, O_prime, H) -> mulOctet6 (B6, B7, B8, O_prime, mulOctetA (H, rightOctet5 (O_prime), leftOctet3 (O_prime)))
 mulOctet6 (x0, B7, B8, O_prime, H) -> mulOctet7 (B7, B8, O_prime, H)
 mulOctet6 (x1, B7, B8, O_prime, H) -> mulOctet7 (B7, B8, O_prime, mulOctetA (H, rightOctet6 (O_prime), leftOctet2 (O_prime)))
 mulOctet7 (x0, B8, O_prime, H) -> mulOctet8 (B8, O_prime, H)
 mulOctet7 (x1, B8, O_prime, H) -> mulOctet8 (B8, O_prime, mulOctetA (H, rightOctet7 (O_prime), leftOctet1 (O_prime)))
 mulOctet8 (x0, O_prime, H) -> H
 mulOctet8 (x1, O_prime, H) -> mulOctetA (H, x00, O_prime)
 mulOctetA (buildHalf (O1, O2), O_prime1, O_prime2) -> mulOctetB (addOctet (O1, O_prime1), addOctetSum (O2, O_prime2, x0))
 mulOctetB (O1, buildOctetSum (x0, O2)) -> buildHalf (O1, O2)
 mulOctetB (O1, buildOctetSum (x1, O2)) -> buildHalf (addOctet (O1, x01), O2)
 mulHalf (buildHalf (O1, O2), buildHalf (O_prime1, O_prime2)) -> mulHalfA (mulOctet (O1, O_prime1), mulOctet (O1, O_prime2), mulOctet (O2, O_prime1), mulOctet (O2, O_prime2))
 mulHalfA (buildHalf (O11U, O11L), buildHalf (O12U, O12L), buildHalf (O21U, O21L), buildHalf (O22U, O22L)) -> mulHalf4 (O11U, O11L, O12U, O12L, O21U, O21L, O22U, O22L)
 mulHalf4 (O11U, O11L, O12U, O12L, O21U, O21L, O22U, O_second4) -> mulHalf3 (O11U, O11L, O12U, O21U, addHalfOctet (O12L, addHalfOctets (O21L, O22U)), O_second4)
 mulHalf3 (O11U, O11L, O12U, O21U, buildHalf (Ocarry, O_second3), O_second4) -> mulHalf2 (O11U, addHalfOctet (Ocarry, addHalfOctet (O11L, addHalfOctets (O12U, O21U))), O_second3, O_second4)
 mulHalf2 (O11U, buildHalf (Ocarry, O_second2), O_second3, O_second4) -> mulHalf1 (addHalfOctets (Ocarry, O11U), O_second2, O_second3, O_second4)
 mulHalf1 (buildHalf (Ocarry, O_second1), O_second2, O_second3, O_second4) -> buildBlock (O_second1, O_second2, O_second3, O_second4)
 mulBlock (W1, W2) -> mulBlockA (mulHalf (HalfU (W1), HalfU (W2)), mulHalf (HalfU (W1), HalfL (W2)), mulHalf (HalfL (W1), HalfU (W2)), mulHalf (HalfL (W1), HalfL (W2)))
 mulBlockA (W11, W12, W21, W22) -> mulBlock4 (HalfU (W11), HalfL (W11), HalfU (W12), HalfL (W12), HalfU (W21), HalfL (W21), HalfU (W22), HalfL (W22))
 mulBlock4 (H11U, H11L, H12U, H12L, H21U, H21L, H22U, H_second4) -> mulBlock3 (H11U, H11L, H12U, H21U, addBlockHalf (H12L, addBlockHalves (H21L, H22U)), H_second4)
 mulBlock3 (H11U, H11L, H12U, H21U, W, H_second4) -> mulBlock2 (H11U, addBlockHalf (HalfU (W), addBlockHalf (H11L, addBlockHalves (H12U, H21U))), HalfL (W), H_second4)
 mulBlock2 (H11U, W, H_second3, H_second4) -> mulBlock1 (addBlockHalves (HalfU (W), H11U), HalfL (W), H_second3, H_second4)
 mulBlock1 (W, H_second2, H_second3, H_second4) -> mulBlockB (HalfL (W), H_second2, H_second3, H_second4)
 mulBlockB (buildHalf (O1U, O1L), buildHalf (O2U, O2L), buildHalf (O3U, O3L), buildHalf (O4U, O4L)) -> buildPair (buildBlock (O1U, O1L, O2U, O2L), buildBlock (O3U, O3L, O4U, O4L))
 addNat (N, zero) -> N
 addNat (N, succ (N_prime)) -> addNat (succ (N), N_prime)
 multNat (N, zero) -> zero
 multNat (N, succ (N_prime)) -> addNat (N, multNat (N, N_prime))
 eqNat (zero, zero) -> true
 eqNat (zero, succ (N_prime)) -> false
 eqNat (succ (N), zero) -> false
 eqNat (succ (N), succ (N_prime)) -> eqNat (N, N_prime)
 ltNat (zero, zero) -> false
 ltNat (zero, succ (N_prime)) -> true
 ltNat (succ (N_prime), zero) -> false
 ltNat (succ (N), succ (N_prime)) -> ltNat (N, N_prime)
 n1 -> succ (zero)
 n2 -> succ (n1)
 n3 -> succ (n2)
 n4 -> succ (n3)
 n5 -> succ (n4)
 n6 -> succ (n5)
 n7 -> succ (n6)
 n8 -> succ (n7)
 n9 -> succ (n8)
 n10 -> succ (n9)
 n11 -> succ (n10)
 n12 -> succ (n11)
 n13 -> succ (n12)
 n14 -> succ (n13)
 n15 -> succ (n14)
 n16 -> succ (n15)
 n17 -> succ (n16)
 n18 -> succ (n17)
 n19 -> succ (n18)
 n20 -> succ (n19)
 n21 -> succ (n20)
 n22 -> succ (n21)
 n254 -> addNat (n12, multNat (n11, n22))
 n256 -> multNat (n16, n16)
 n4100 -> addNat (n4, multNat (n16, n256))
 andOctet (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8)) -> buildOctet (andBit (B1, B_prime1), andBit (B2, B_prime2), andBit (B3, B_prime3), andBit (B4, B_prime4), andBit (B5, B_prime5), andBit (B6, B_prime6), andBit (B7, B_prime7), andBit (B8, B_prime8))
 orOctet (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8)) -> buildOctet (orBit (B1, B_prime1), orBit (B2, B_prime2), orBit (B3, B_prime3), orBit (B4, B_prime4), orBit (B5, B_prime5), orBit (B6, B_prime6), orBit (B7, B_prime7), orBit (B8, B_prime8))
 xorOctet (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8)) -> buildOctet (xorBit (B1, B_prime1), xorBit (B2, B_prime2), xorBit (B3, B_prime3), xorBit (B4, B_prime4), xorBit (B5, B_prime5), xorBit (B6, B_prime6), xorBit (B7, B_prime7), xorBit (B8, B_prime8))
 x02 -> buildOctet (x0, x0, x0, x0, x0, x0, x1, x0)
 x03 -> buildOctet (x0, x0, x0, x0, x0, x0, x1, x1)
 x04 -> buildOctet (x0, x0, x0, x0, x0, x1, x0, x0)
 x05 -> buildOctet (x0, x0, x0, x0, x0, x1, x0, x1)
 x06 -> buildOctet (x0, x0, x0, x0, x0, x1, x1, x0)
 x07 -> buildOctet (x0, x0, x0, x0, x0, x1, x1, x1)
 x08 -> buildOctet (x0, x0, x0, x0, x1, x0, x0, x0)
 x09 -> buildOctet (x0, x0, x0, x0, x1, x0, x0, x1)
 x0A -> buildOctet (x0, x0, x0, x0, x1, x0, x1, x0)
 x0B -> buildOctet (x0, x0, x0, x0, x1, x0, x1, x1)
 x0C -> buildOctet (x0, x0, x0, x0, x1, x1, x0, x0)
 x0D -> buildOctet (x0, x0, x0, x0, x1, x1, x0, x1)
 x0E -> buildOctet (x0, x0, x0, x0, x1, x1, x1, x0)
 x0F -> buildOctet (x0, x0, x0, x0, x1, x1, x1, x1)
 x10 -> buildOctet (x0, x0, x0, x1, x0, x0, x0, x0)
 x11 -> buildOctet (x0, x0, x0, x1, x0, x0, x0, x1)
 x12 -> buildOctet (x0, x0, x0, x1, x0, x0, x1, x0)
 x13 -> buildOctet (x0, x0, x0, x1, x0, x0, x1, x1)
 x14 -> buildOctet (x0, x0, x0, x1, x0, x1, x0, x0)
 x15 -> buildOctet (x0, x0, x0, x1, x0, x1, x0, x1)
 x16 -> buildOctet (x0, x0, x0, x1, x0, x1, x1, x0)
 x17 -> buildOctet (x0, x0, x0, x1, x0, x1, x1, x1)
 x18 -> buildOctet (x0, x0, x0, x1, x1, x0, x0, x0)
 x1A -> buildOctet (x0, x0, x0, x1, x1, x0, x1, x0)
 x1B -> buildOctet (x0, x0, x0, x1, x1, x0, x1, x1)
 x1C -> buildOctet (x0, x0, x0, x1, x1, x1, x0, x0)
 x1D -> buildOctet (x0, x0, x0, x1, x1, x1, x0, x1)
 x1E -> buildOctet (x0, x0, x0, x1, x1, x1, x1, x0)
 x1F -> buildOctet (x0, x0, x0, x1, x1, x1, x1, x1)
 x20 -> buildOctet (x0, x0, x1, x0, x0, x0, x0, x0)
 x21 -> buildOctet (x0, x0, x1, x0, x0, x0, x0, x1)
 x23 -> buildOctet (x0, x0, x1, x0, x0, x0, x1, x1)
 x24 -> buildOctet (x0, x0, x1, x0, x0, x1, x0, x0)
 x25 -> buildOctet (x0, x0, x1, x0, x0, x1, x0, x1)
 x26 -> buildOctet (x0, x0, x1, x0, x0, x1, x1, x0)
 x27 -> buildOctet (x0, x0, x1, x0, x0, x1, x1, x1)
 x28 -> buildOctet (x0, x0, x1, x0, x1, x0, x0, x0)
 x29 -> buildOctet (x0, x0, x1, x0, x1, x0, x0, x1)
 x2A -> buildOctet (x0, x0, x1, x0, x1, x0, x1, x0)
 x2B -> buildOctet (x0, x0, x1, x0, x1, x0, x1, x1)
 x2D -> buildOctet (x0, x0, x1, x0, x1, x1, x0, x1)
 x2E -> buildOctet (x0, x0, x1, x0, x1, x1, x1, x0)
 x2F -> buildOctet (x0, x0, x1, x0, x1, x1, x1, x1)
 x30 -> buildOctet (x0, x0, x1, x1, x0, x0, x0, x0)
 x31 -> buildOctet (x0, x0, x1, x1, x0, x0, x0, x1)
 x32 -> buildOctet (x0, x0, x1, x1, x0, x0, x1, x0)
 x33 -> buildOctet (x0, x0, x1, x1, x0, x0, x1, x1)
 x34 -> buildOctet (x0, x0, x1, x1, x0, x1, x0, x0)
 x35 -> buildOctet (x0, x0, x1, x1, x0, x1, x0, x1)
 x36 -> buildOctet (x0, x0, x1, x1, x0, x1, x1, x0)
 x37 -> buildOctet (x0, x0, x1, x1, x0, x1, x1, x1)
 x38 -> buildOctet (x0, x0, x1, x1, x1, x0, x0, x0)
 x39 -> buildOctet (x0, x0, x1, x1, x1, x0, x0, x1)
 x3A -> buildOctet (x0, x0, x1, x1, x1, x0, x1, x0)
 x3B -> buildOctet (x0, x0, x1, x1, x1, x0, x1, x1)
 x3D -> buildOctet (x0, x0, x1, x1, x1, x1, x0, x1)
 x3C -> buildOctet (x0, x0, x1, x1, x1, x1, x0, x0)
 x3F -> buildOctet (x0, x0, x1, x1, x1, x1, x1, x1)
 x40 -> buildOctet (x0, x1, x0, x0, x0, x0, x0, x0)
 x46 -> buildOctet (x0, x1, x0, x0, x0, x1, x1, x0)
 x48 -> buildOctet (x0, x1, x0, x0, x1, x0, x0, x0)
 x49 -> buildOctet (x0, x1, x0, x0, x1, x0, x0, x1)
 x4A -> buildOctet (x0, x1, x0, x0, x1, x0, x1, x0)
 x4B -> buildOctet (x0, x1, x0, x0, x1, x0, x1, x1)
 x4C -> buildOctet (x0, x1, x0, x0, x1, x1, x0, x0)
 x4D -> buildOctet (x0, x1, x0, x0, x1, x1, x0, x1)
 x4E -> buildOctet (x0, x1, x0, x0, x1, x1, x1, x0)
 x4F -> buildOctet (x0, x1, x0, x0, x1, x1, x1, x1)
 x50 -> buildOctet (x0, x1, x0, x1, x0, x0, x0, x0)
 x51 -> buildOctet (x0, x1, x0, x1, x0, x0, x0, x1)
 x53 -> buildOctet (x0, x1, x0, x1, x0, x0, x1, x1)
 x54 -> buildOctet (x0, x1, x0, x1, x0, x1, x0, x0)
 x55 -> buildOctet (x0, x1, x0, x1, x0, x1, x0, x1)
 x58 -> buildOctet (x0, x1, x0, x1, x1, x0, x0, x0)
 x5A -> buildOctet (x0, x1, x0, x1, x1, x0, x1, x0)
 x5B -> buildOctet (x0, x1, x0, x1, x1, x0, x1, x1)
 x5C -> buildOctet (x0, x1, x0, x1, x1, x1, x0, x0)
 x5D -> buildOctet (x0, x1, x0, x1, x1, x1, x0, x1)
 x5E -> buildOctet (x0, x1, x0, x1, x1, x1, x1, x0)
 x5F -> buildOctet (x0, x1, x0, x1, x1, x1, x1, x1)
 x60 -> buildOctet (x0, x1, x1, x0, x0, x0, x0, x0)
 x61 -> buildOctet (x0, x1, x1, x0, x0, x0, x0, x1)
 x62 -> buildOctet (x0, x1, x1, x0, x0, x0, x1, x0)
 x63 -> buildOctet (x0, x1, x1, x0, x0, x0, x1, x1)
 x64 -> buildOctet (x0, x1, x1, x0, x0, x1, x0, x0)
 x65 -> buildOctet (x0, x1, x1, x0, x0, x1, x0, x1)
 x66 -> buildOctet (x0, x1, x1, x0, x0, x1, x1, x0)
 x67 -> buildOctet (x0, x1, x1, x0, x0, x1, x1, x1)
 x69 -> buildOctet (x0, x1, x1, x0, x1, x0, x0, x1)
 x6A -> buildOctet (x0, x1, x1, x0, x1, x0, x1, x0)
 x6B -> buildOctet (x0, x1, x1, x0, x1, x0, x1, x1)
 x6C -> buildOctet (x0, x1, x1, x0, x1, x1, x0, x0)
 x6D -> buildOctet (x0, x1, x1, x0, x1, x1, x0, x1)
 x6E -> buildOctet (x0, x1, x1, x0, x1, x1, x1, x0)
 x6F -> buildOctet (x0, x1, x1, x0, x1, x1, x1, x1)
 x70 -> buildOctet (x0, x1, x1, x1, x0, x0, x0, x0)
 x71 -> buildOctet (x0, x1, x1, x1, x0, x0, x0, x1)
 x72 -> buildOctet (x0, x1, x1, x1, x0, x0, x1, x0)
 x73 -> buildOctet (x0, x1, x1, x1, x0, x0, x1, x1)
 x74 -> buildOctet (x0, x1, x1, x1, x0, x1, x0, x0)
 x75 -> buildOctet (x0, x1, x1, x1, x0, x1, x0, x1)
 x76 -> buildOctet (x0, x1, x1, x1, x0, x1, x1, x0)
 x77 -> buildOctet (x0, x1, x1, x1, x0, x1, x1, x1)
 x78 -> buildOctet (x0, x1, x1, x1, x1, x0, x0, x0)
 x79 -> buildOctet (x0, x1, x1, x1, x1, x0, x0, x1)
 x7A -> buildOctet (x0, x1, x1, x1, x1, x0, x1, x0)
 x7B -> buildOctet (x0, x1, x1, x1, x1, x0, x1, x1)
 x7C -> buildOctet (x0, x1, x1, x1, x1, x1, x0, x0)
 x7D -> buildOctet (x0, x1, x1, x1, x1, x1, x0, x1)
 x7E -> buildOctet (x0, x1, x1, x1, x1, x1, x1, x0)
 x7F -> buildOctet (x0, x1, x1, x1, x1, x1, x1, x1)
 x80 -> buildOctet (x1, x0, x0, x0, x0, x0, x0, x0)
 x81 -> buildOctet (x1, x0, x0, x0, x0, x0, x0, x1)
 x83 -> buildOctet (x1, x0, x0, x0, x0, x0, x1, x1)
 x84 -> buildOctet (x1, x0, x0, x0, x0, x1, x0, x0)
 x85 -> buildOctet (x1, x0, x0, x0, x0, x1, x0, x1)
 x86 -> buildOctet (x1, x0, x0, x0, x0, x1, x1, x0)
 x88 -> buildOctet (x1, x0, x0, x0, x1, x0, x0, x0)
 x89 -> buildOctet (x1, x0, x0, x0, x1, x0, x0, x1)
 x8A -> buildOctet (x1, x0, x0, x0, x1, x0, x1, x0)
 x8C -> buildOctet (x1, x0, x0, x0, x1, x1, x0, x0)
 x8D -> buildOctet (x1, x0, x0, x0, x1, x1, x0, x1)
 x8E -> buildOctet (x1, x0, x0, x0, x1, x1, x1, x0)
 x8F -> buildOctet (x1, x0, x0, x0, x1, x1, x1, x1)
 x90 -> buildOctet (x1, x0, x0, x1, x0, x0, x0, x0)
 x91 -> buildOctet (x1, x0, x0, x1, x0, x0, x0, x1)
 x92 -> buildOctet (x1, x0, x0, x1, x0, x0, x1, x0)
 x93 -> buildOctet (x1, x0, x0, x1, x0, x0, x1, x1)
 x95 -> buildOctet (x1, x0, x0, x1, x0, x1, x0, x1)
 x96 -> buildOctet (x1, x0, x0, x1, x0, x1, x1, x0)
 x97 -> buildOctet (x1, x0, x0, x1, x0, x1, x1, x1)
 x98 -> buildOctet (x1, x0, x0, x1, x1, x0, x0, x0)
 x99 -> buildOctet (x1, x0, x0, x1, x1, x0, x0, x1)
 x9A -> buildOctet (x1, x0, x0, x1, x1, x0, x1, x0)
 x9B -> buildOctet (x1, x0, x0, x1, x1, x0, x1, x1)
 x9C -> buildOctet (x1, x0, x0, x1, x1, x1, x0, x0)
 x9D -> buildOctet (x1, x0, x0, x1, x1, x1, x0, x1)
 x9E -> buildOctet (x1, x0, x0, x1, x1, x1, x1, x0)
 x9F -> buildOctet (x1, x0, x0, x1, x1, x1, x1, x1)
 xA1 -> buildOctet (x1, x0, x1, x0, x0, x0, x0, x1)
 xA0 -> buildOctet (x1, x0, x1, x0, x0, x0, x0, x0)
 xA2 -> buildOctet (x1, x0, x1, x0, x0, x0, x1, x0)
 xA3 -> buildOctet (x1, x0, x1, x0, x0, x0, x1, x1)
 xA4 -> buildOctet (x1, x0, x1, x0, x0, x1, x0, x0)
 xA5 -> buildOctet (x1, x0, x1, x0, x0, x1, x0, x1)
 xA6 -> buildOctet (x1, x0, x1, x0, x0, x1, x1, x0)
 xA7 -> buildOctet (x1, x0, x1, x0, x0, x1, x1, x1)
 xA8 -> buildOctet (x1, x0, x1, x0, x1, x0, x0, x0)
 xA9 -> buildOctet (x1, x0, x1, x0, x1, x0, x0, x1)
 xAA -> buildOctet (x1, x0, x1, x0, x1, x0, x1, x0)
 xAB -> buildOctet (x1, x0, x1, x0, x1, x0, x1, x1)
 xAC -> buildOctet (x1, x0, x1, x0, x1, x1, x0, x0)
 xAE -> buildOctet (x1, x0, x1, x0, x1, x1, x1, x0)
 xAF -> buildOctet (x1, x0, x1, x0, x1, x1, x1, x1)
 xB0 -> buildOctet (x1, x0, x1, x1, x0, x0, x0, x0)
 xB1 -> buildOctet (x1, x0, x1, x1, x0, x0, x0, x1)
 xB2 -> buildOctet (x1, x0, x1, x1, x0, x0, x1, x0)
 xB3 -> buildOctet (x1, x0, x1, x1, x0, x0, x1, x1)
 xB5 -> buildOctet (x1, x0, x1, x1, x0, x1, x0, x1)
 xB6 -> buildOctet (x1, x0, x1, x1, x0, x1, x1, x0)
 xB8 -> buildOctet (x1, x0, x1, x1, x1, x0, x0, x0)
 xB9 -> buildOctet (x1, x0, x1, x1, x1, x0, x0, x1)
 xBA -> buildOctet (x1, x0, x1, x1, x1, x0, x1, x0)
 xBB -> buildOctet (x1, x0, x1, x1, x1, x0, x1, x1)
 xBC -> buildOctet (x1, x0, x1, x1, x1, x1, x0, x0)
 xBE -> buildOctet (x1, x0, x1, x1, x1, x1, x1, x0)
 xBF -> buildOctet (x1, x0, x1, x1, x1, x1, x1, x1)
 xC0 -> buildOctet (x1, x1, x0, x0, x0, x0, x0, x0)
 xC1 -> buildOctet (x1, x1, x0, x0, x0, x0, x0, x1)
 xC2 -> buildOctet (x1, x1, x0, x0, x0, x0, x1, x0)
 xC4 -> buildOctet (x1, x1, x0, x0, x0, x1, x0, x0)
 xC5 -> buildOctet (x1, x1, x0, x0, x0, x1, x0, x1)
 xC6 -> buildOctet (x1, x1, x0, x0, x0, x1, x1, x0)
 xC7 -> buildOctet (x1, x1, x0, x0, x0, x1, x1, x1)
 xC8 -> buildOctet (x1, x1, x0, x0, x1, x0, x0, x0)
 xC9 -> buildOctet (x1, x1, x0, x0, x1, x0, x0, x1)
 xCA -> buildOctet (x1, x1, x0, x0, x1, x0, x1, x0)
 xCB -> buildOctet (x1, x1, x0, x0, x1, x0, x1, x1)
 xCC -> buildOctet (x1, x1, x0, x0, x1, x1, x0, x0)
 xCD -> buildOctet (x1, x1, x0, x0, x1, x1, x0, x1)
 xCE -> buildOctet (x1, x1, x0, x0, x1, x1, x1, x0)
 xD0 -> buildOctet (x1, x1, x0, x1, x0, x0, x0, x0)
 xD1 -> buildOctet (x1, x1, x0, x1, x0, x0, x0, x1)
 xD2 -> buildOctet (x1, x1, x0, x1, x0, x0, x1, x0)
 xD3 -> buildOctet (x1, x1, x0, x1, x0, x0, x1, x1)
 xD4 -> buildOctet (x1, x1, x0, x1, x0, x1, x0, x0)
 xD5 -> buildOctet (x1, x1, x0, x1, x0, x1, x0, x1)
 xD6 -> buildOctet (x1, x1, x0, x1, x0, x1, x1, x0)
 xD7 -> buildOctet (x1, x1, x0, x1, x0, x1, x1, x1)
 xD8 -> buildOctet (x1, x1, x0, x1, x1, x0, x0, x0)
 xD9 -> buildOctet (x1, x1, x0, x1, x1, x0, x0, x1)
 xDB -> buildOctet (x1, x1, x0, x1, x1, x0, x1, x1)
 xDC -> buildOctet (x1, x1, x0, x1, x1, x1, x0, x0)
 xDD -> buildOctet (x1, x1, x0, x1, x1, x1, x0, x1)
 xDE -> buildOctet (x1, x1, x0, x1, x1, x1, x1, x0)
 xDF -> buildOctet (x1, x1, x0, x1, x1, x1, x1, x1)
 xE0 -> buildOctet (x1, x1, x1, x0, x0, x0, x0, x0)
 xE1 -> buildOctet (x1, x1, x1, x0, x0, x0, x0, x1)
 xE3 -> buildOctet (x1, x1, x1, x0, x0, x0, x1, x1)
 xE6 -> buildOctet (x1, x1, x1, x0, x0, x1, x1, x0)
 xE8 -> buildOctet (x1, x1, x1, x0, x1, x0, x0, x0)
 xE9 -> buildOctet (x1, x1, x1, x0, x1, x0, x0, x1)
 xEA -> buildOctet (x1, x1, x1, x0, x1, x0, x1, x0)
 xEB -> buildOctet (x1, x1, x1, x0, x1, x0, x1, x1)
 xEC -> buildOctet (x1, x1, x1, x0, x1, x1, x0, x0)
 xED -> buildOctet (x1, x1, x1, x0, x1, x1, x0, x1)
 xEE -> buildOctet (x1, x1, x1, x0, x1, x1, x1, x0)
 xEF -> buildOctet (x1, x1, x1, x0, x1, x1, x1, x1)
 xF0 -> buildOctet (x1, x1, x1, x1, x0, x0, x0, x0)
 xF1 -> buildOctet (x1, x1, x1, x1, x0, x0, x0, x1)
 xF2 -> buildOctet (x1, x1, x1, x1, x0, x0, x1, x0)
 xF3 -> buildOctet (x1, x1, x1, x1, x0, x0, x1, x1)
 xF4 -> buildOctet (x1, x1, x1, x1, x0, x1, x0, x0)
 xF5 -> buildOctet (x1, x1, x1, x1, x0, x1, x0, x1)
 xF6 -> buildOctet (x1, x1, x1, x1, x0, x1, x1, x0)
 xF7 -> buildOctet (x1, x1, x1, x1, x0, x1, x1, x1)
 xF8 -> buildOctet (x1, x1, x1, x1, x1, x0, x0, x0)
 xF9 -> buildOctet (x1, x1, x1, x1, x1, x0, x0, x1)
 xFA -> buildOctet (x1, x1, x1, x1, x1, x0, x1, x0)
 xFB -> buildOctet (x1, x1, x1, x1, x1, x0, x1, x1)
 xFC -> buildOctet (x1, x1, x1, x1, x1, x1, x0, x0)
 xFD -> buildOctet (x1, x1, x1, x1, x1, x1, x0, x1)
 xFE -> buildOctet (x1, x1, x1, x1, x1, x1, x1, x0)
 xFF -> buildOctet (x1, x1, x1, x1, x1, x1, x1, x1)
 andBlock (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) -> buildBlock (andOctet (O1, O_prime1), andOctet (O2, O_prime2), andOctet (O3, O_prime3), andOctet (O4, O_prime4))
 orBlock (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) -> buildBlock (orOctet (O1, O_prime1), orOctet (O2, O_prime2), orOctet (O3, O_prime3), orOctet (O4, O_prime4))
 xorBlock (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) -> buildBlock (xorOctet (O1, O_prime1), xorOctet (O2, O_prime2), xorOctet (O3, O_prime3), xorOctet (O4, O_prime4))
 x0001 -> buildHalf (x00, x01)
 x00000000 -> buildBlock (x00, x00, x00, x00)
 x00000001 -> buildBlock (x00, x00, x00, x01)
 x00000002 -> buildBlock (x00, x00, x00, x02)
 x00000003 -> buildBlock (x00, x00, x00, x03)
 x00000004 -> buildBlock (x00, x00, x00, x04)
 x00000005 -> buildBlock (x00, x00, x00, x05)
 x00000006 -> buildBlock (x00, x00, x00, x06)
 x00000007 -> buildBlock (x00, x00, x00, x07)
 x00000008 -> buildBlock (x00, x00, x00, x08)
 x00000009 -> buildBlock (x00, x00, x00, x09)
 x0000000A -> buildBlock (x00, x00, x00, x0A)
 x0000000B -> buildBlock (x00, x00, x00, x0B)
 x0000000C -> buildBlock (x00, x00, x00, x0C)
 x0000000D -> buildBlock (x00, x00, x00, x0D)
 x0000000E -> buildBlock (x00, x00, x00, x0E)
 x0000000F -> buildBlock (x00, x00, x00, x0F)
 x00000010 -> buildBlock (x00, x00, x00, x10)
 x00000012 -> buildBlock (x00, x00, x00, x12)
 x00000014 -> buildBlock (x00, x00, x00, x14)
 x00000016 -> buildBlock (x00, x00, x00, x16)
 x00000018 -> buildBlock (x00, x00, x00, x18)
 x0000001B -> buildBlock (x00, x00, x00, x1B)
 x0000001D -> buildBlock (x00, x00, x00, x1D)
 x0000001E -> buildBlock (x00, x00, x00, x1E)
 x0000001F -> buildBlock (x00, x00, x00, x1F)
 x00000031 -> buildBlock (x00, x00, x00, x31)
 x00000036 -> buildBlock (x00, x00, x00, x36)
 x00000060 -> buildBlock (x00, x00, x00, x60)
 x00000080 -> buildBlock (x00, x00, x00, x80)
 x000000A5 -> buildBlock (x00, x00, x00, xA5)
 x000000B6 -> buildBlock (x00, x00, x00, xB6)
 x000000C4 -> buildBlock (x00, x00, x00, xC4)
 x000000D2 -> buildBlock (x00, x00, x00, xD2)
 x00000100 -> buildBlock (x00, x00, x01, x00)
 x00000129 -> buildBlock (x00, x00, x01, x29)
 x0000018C -> buildBlock (x00, x00, x01, x8C)
 x00004000 -> buildBlock (x00, x00, x40, x00)
 x00010000 -> buildBlock (x00, x01, x00, x00)
 x00020000 -> buildBlock (x00, x02, x00, x00)
 x00030000 -> buildBlock (x00, x03, x00, x00)
 x00040000 -> buildBlock (x00, x04, x00, x00)
 x00060000 -> buildBlock (x00, x06, x00, x00)
 x00804021 -> buildBlock (x00, x80, x40, x21)
 x00FF00FF -> buildBlock (x00, xFF, x00, xFF)
 x0103050B -> buildBlock (x01, x03, x05, x0B)
 x01030703 -> buildBlock (x01, x03, x07, x03)
 x01030705 -> buildBlock (x01, x03, x07, x05)
 x0103070F -> buildBlock (x01, x03, x07, x0F)
 x02040801 -> buildBlock (x02, x04, x08, x01)
 x0297AF6F -> buildBlock (x02, x97, xAF, x6F)
 x07050301 -> buildBlock (x07, x05, x03, x01)
 x077788A2 -> buildBlock (x07, x77, x88, xA2)
 x07C72EAA -> buildBlock (x07, xC7, x2E, xAA)
 x0A202020 -> buildBlock (x0A, x20, x20, x20)
 x0AD67E20 -> buildBlock (x0A, xD6, x7E, x20)
 x10000000 -> buildBlock (x10, x00, x00, x00)
 x11A9D254 -> buildBlock (x11, xA9, xD2, x54)
 x11AC46B8 -> buildBlock (x11, xAC, x46, xB8)
 x1277A6D4 -> buildBlock (x12, x77, xA6, xD4)
 x13647149 -> buildBlock (x13, x64, x71, x49)
 x160EE9B5 -> buildBlock (x16, x0E, xE9, xB5)
 x17065DBB -> buildBlock (x17, x06, x5D, xBB)
 x17A808FD -> buildBlock (x17, xA8, x08, xFD)
 x1D10D8D3 -> buildBlock (x1D, x10, xD8, xD3)
 x1D3B7760 -> buildBlock (x1D, x3B, x77, x60)
 x1D9C9655 -> buildBlock (x1D, x9C, x96, x55)
 x1F3F7FFF -> buildBlock (x1F, x3F, x7F, xFF)
 x204E80A7 -> buildBlock (x20, x4E, x80, xA7)
 x21D869BA -> buildBlock (x21, xD8, x69, xBA)
 x24B66FB5 -> buildBlock (x24, xB6, x6F, xB5)
 x270EEDAF -> buildBlock (x27, x0E, xED, xAF)
 x277B4B25 -> buildBlock (x27, x7B, x4B, x25)
 x2829040B -> buildBlock (x28, x29, x04, x0B)
 x288FC786 -> buildBlock (x28, x8F, xC7, x86)
 x28EAD8B3 -> buildBlock (x28, xEA, xD8, xB3)
 x29907CD8 -> buildBlock (x29, x90, x7C, xD8)
 x29C1485F -> buildBlock (x29, xC1, x48, x5F)
 x29EEE96B -> buildBlock (x29, xEE, xE9, x6B)
 x2A6091AE -> buildBlock (x2A, x60, x91, xAE)
 x2BF8499A -> buildBlock (x2B, xF8, x49, x9A)
 x2E80AC30 -> buildBlock (x2E, x80, xAC, x30)
 x2FD76FFB -> buildBlock (x2F, xD7, x6F, xFB)
 x30261492 -> buildBlock (x30, x26, x14, x92)
 x303FF4AA -> buildBlock (x30, x3F, xF4, xAA)
 x33D5A466 -> buildBlock (x33, xD5, xA4, x66)
 x344925FC -> buildBlock (x34, x49, x25, xFC)
 x34ACF886 -> buildBlock (x34, xAC, xF8, x86)
 x3CD54DEB -> buildBlock (x3C, xD5, x4D, xEB)
 x3CF3A7D2 -> buildBlock (x3C, xF3, xA7, xD2)
 x3DD81AC6 -> buildBlock (x3D, xD8, x1A, xC6)
 x3F6F7248 -> buildBlock (x3F, x6F, x72, x48)
 x48B204D6 -> buildBlock (x48, xB2, x04, xD6)
 x4A645A01 -> buildBlock (x4A, x64, x5A, x01)
 x4C49AAE0 -> buildBlock (x4C, x49, xAA, xE0)
 x4CE933E1 -> buildBlock (x4C, xE9, x33, xE1)
 x4D53901A -> buildBlock (x4D, x53, x90, x1A)
 x4DA124A1 -> buildBlock (x4D, xA1, x24, xA1)
 x4F998E01 -> buildBlock (x4F, x99, x8E, x01)
 x4FB1138A -> buildBlock (x4F, xB1, x13, x8A)
 x50DEC930 -> buildBlock (x50, xDE, xC9, x30)
 x51AF3C1D -> buildBlock (x51, xAF, x3C, x1D)
 x51EDE9C7 -> buildBlock (x51, xED, xE9, xC7)
 x550D91CE -> buildBlock (x55, x0D, x91, xCE)
 x55555555 -> buildBlock (x55, x55, x55, x55)
 x55DD063F -> buildBlock (x55, xDD, x06, x3F)
 x5834A585 -> buildBlock (x58, x34, xA5, x85)
 x5A35D667 -> buildBlock (x5A, x35, xD6, x67)
 x5BC02502 -> buildBlock (x5B, xC0, x25, x02)
 x5CCA3239 -> buildBlock (x5C, xCA, x32, x39)
 x5EBA06C2 -> buildBlock (x5E, xBA, x06, xC2)
 x5F38EEF1 -> buildBlock (x5F, x38, xEE, xF1)
 x613F8E2A -> buildBlock (x61, x3F, x8E, x2A)
 x63C70DBA -> buildBlock (x63, xC7, x0D, xBA)
 x6AD6E8A4 -> buildBlock (x6A, xD6, xE8, xA4)
 x6AEBACF8 -> buildBlock (x6A, xEB, xAC, xF8)
 x6D67E884 -> buildBlock (x6D, x67, xE8, x84)
 x7050EC5E -> buildBlock (x70, x50, xEC, x5E)
 x717153D5 -> buildBlock (x71, x71, x53, xD5)
 x7201F4DC -> buildBlock (x72, x01, xF4, xDC)
 x7397C9AE -> buildBlock (x73, x97, xC9, xAE)
 x74B39176 -> buildBlock (x74, xB3, x91, x76)
 x76232E5F -> buildBlock (x76, x23, x2E, x5F)
 x7783C51D -> buildBlock (x77, x83, xC5, x1D)
 x7792F9D4 -> buildBlock (x77, x92, xF9, xD4)
 x7BC180AB -> buildBlock (x7B, xC1, x80, xAB)
 x7DB2D9F4 -> buildBlock (x7D, xB2, xD9, xF4)
 x7DFEFBFF -> buildBlock (x7D, xFE, xFB, xFF)
 x7F76A3B0 -> buildBlock (x7F, x76, xA3, xB0)
 x7F839576 -> buildBlock (x7F, x83, x95, x76)
 x7FFFFFF0 -> buildBlock (x7F, xFF, xFF, xF0)
 x7FFFFFF1 -> buildBlock (x7F, xFF, xFF, xF1)
 x7FFFFFFC -> buildBlock (x7F, xFF, xFF, xFC)
 x7FFFFFFD -> buildBlock (x7F, xFF, xFF, xFD)
 x80000000 -> buildBlock (x80, x00, x00, x00)
 x80000002 -> buildBlock (x80, x00, x00, x02)
 x800000C2 -> buildBlock (x80, x00, x00, xC2)
 x80018000 -> buildBlock (x80, x01, x80, x00)
 x80018001 -> buildBlock (x80, x01, x80, x01)
 x80397302 -> buildBlock (x80, x39, x73, x02)
 x81D10CA3 -> buildBlock (x81, xD1, x0C, xA3)
 x89D635D7 -> buildBlock (x89, xD6, x35, xD7)
 x8CE37709 -> buildBlock (x8C, xE3, x77, x09)
 x8DC8BBDE -> buildBlock (x8D, xC8, xBB, xDE)
 x9115A558 -> buildBlock (x91, x15, xA5, x58)
 x91896CFA -> buildBlock (x91, x89, x6C, xFA)
 x9372CDC6 -> buildBlock (x93, x72, xCD, xC6)
 x98D1CC75 -> buildBlock (x98, xD1, xCC, x75)
 x9D15C437 -> buildBlock (x9D, x15, xC4, x37)
 x9DB15CF6 -> buildBlock (x9D, xB1, x5C, xF6)
 x9E2E7B36 -> buildBlock (x9E, x2E, x7B, x36)
 xA018C83B -> buildBlock (xA0, x18, xC8, x3B)
 xA0B87B77 -> buildBlock (xA0, xB8, x7B, x77)
 xA44AAAC0 -> buildBlock (xA4, x4A, xAA, xC0)
 xA511987A -> buildBlock (xA5, x11, x98, x7A)
 xA70FC148 -> buildBlock (xA7, x0F, xC1, x48)
 xA93BD410 -> buildBlock (xA9, x3B, xD4, x10)
 xAAAAAAAA -> buildBlock (xAA, xAA, xAA, xAA)
 xAB00FFCD -> buildBlock (xAB, x00, xFF, xCD)
 xAB01FCCD -> buildBlock (xAB, x01, xFC, xCD)
 xAB6EED4A -> buildBlock (xAB, x6E, xED, x4A)
 xABEEED6B -> buildBlock (xAB, xEE, xED, x6B)
 xACBC13DD -> buildBlock (xAC, xBC, x13, xDD)
 xB1CC1CC5 -> buildBlock (xB1, xCC, x1C, xC5)
 xB8142629 -> buildBlock (xB8, x14, x26, x29)
 xB99A62DE -> buildBlock (xB9, x9A, x62, xDE)
 xBA92DB12 -> buildBlock (xBA, x92, xDB, x12)
 xBBA57835 -> buildBlock (xBB, xA5, x78, x35)
 xBE9F0917 -> buildBlock (xBE, x9F, x09, x17)
 xBF2D7D85 -> buildBlock (xBF, x2D, x7D, x85)
 xBFEF7FDF -> buildBlock (xBF, xEF, x7F, xDF)
 xC1ED90DD -> buildBlock (xC1, xED, x90, xDD)
 xC21A1846 -> buildBlock (xC2, x1A, x18, x46)
 xC4EB1AEB -> buildBlock (xC4, xEB, x1A, xEB)
 xC6B1317E -> buildBlock (xC6, xB1, x31, x7E)
 xCBC865BA -> buildBlock (xCB, xC8, x65, xBA)
 xCD959B46 -> buildBlock (xCD, x95, x9B, x46)
 xD0482465 -> buildBlock (xD0, x48, x24, x65)
 xD636250D -> buildBlock (xD6, x36, x25, x0D)
 xD7843FDC -> buildBlock (xD7, x84, x3F, xDC)
 xD78634BC -> buildBlock (xD7, x86, x34, xBC)
 xD8804CA5 -> buildBlock (xD8, x80, x4C, xA5)
 xDB79FBDC -> buildBlock (xDB, x79, xFB, xDC)
 xDB9102B0 -> buildBlock (xDB, x91, x02, xB0)
 xE0C08000 -> buildBlock (xE0, xC0, x80, x00)
 xE6A12F07 -> buildBlock (xE6, xA1, x2F, x07)
 xEB35B97F -> buildBlock (xEB, x35, xB9, x7F)
 xF0239DD5 -> buildBlock (xF0, x23, x9D, xD5)
 xF14D6E28 -> buildBlock (xF1, x4D, x6E, x28)
 xF2EF3501 -> buildBlock (xF2, xEF, x35, x01)
 xF6A09667 -> buildBlock (xF6, xA0, x96, x67)
 xFD297DA4 -> buildBlock (xFD, x29, x7D, xA4)
 xFDC1A8BA -> buildBlock (xFD, xC1, xA8, xBA)
 xFE4E5BDD -> buildBlock (xFE, x4E, x5B, xDD)
 xFEA1D334 -> buildBlock (xFE, xA1, xD3, x34)
 xFECCAA6E -> buildBlock (xFE, xCC, xAA, x6E)
 xFEFC07F0 -> buildBlock (xFE, xFC, x07, xF0)
 xFF2D7DA5 -> buildBlock (xFF, x2D, x7D, xA5)
 xFFEF0001 -> buildBlock (xFF, xEF, x00, x01)
 xFFFF00FF -> buildBlock (xFF, xFF, x00, xFF)
 xFFFFFF2D -> buildBlock (xFF, xFF, xFF, x2D)
 xFFFFFF3A -> buildBlock (xFF, xFF, xFF, x3A)
 xFFFFFFF0 -> buildBlock (xFF, xFF, xFF, xF0)
 xFFFFFFF1 -> buildBlock (xFF, xFF, xFF, xF1)
 xFFFFFFF4 -> buildBlock (xFF, xFF, xFF, xF4)
 xFFFFFFF5 -> buildBlock (xFF, xFF, xFF, xF5)
 xFFFFFFF7 -> buildBlock (xFF, xFF, xFF, xF7)
 xFFFFFFF9 -> buildBlock (xFF, xFF, xFF, xF9)
 xFFFFFFFA -> buildBlock (xFF, xFF, xFF, xFA)
 xFFFFFFFB -> buildBlock (xFF, xFF, xFF, xFB)
 xFFFFFFFC -> buildBlock (xFF, xFF, xFF, xFC)
 xFFFFFFFD -> buildBlock (xFF, xFF, xFF, xFD)
 xFFFFFFFE -> buildBlock (xFF, xFF, xFF, xFE)
 xFFFFFFFF -> buildBlock (xFF, xFF, xFF, xFF)
 appendMessage (unitMessage (W), W_prime) -> consMessage (W, unitMessage (W_prime))
 appendMessage (consMessage (W, M), W_prime) -> consMessage (W, appendMessage (M, W_prime))
 reverseMessage (unitMessage (W)) -> unitMessage (W)
 reverseMessage (consMessage (W, M)) -> appendMessage (reverseMessage (M), W)
 makeMessage (succ (N), W, W_prime) -> unitMessage (W) | REC_EqBool (eqNat (N, zero), true) -> REC_True
 makeMessage (succ (N), W, W_prime) -> consMessage (W, makeMessage (N, ADD (W, W_prime), W_prime)) | REC_EqBool (eqNat (N, zero), false) -> REC_True
 ADD (W, W_prime) -> addBlock (W, W_prime)
 AND (W, W_prime) -> andBlock (W, W_prime)
 MUL (W, W_prime) -> mulBlock (W, W_prime)
 OR (W, W_prime) -> orBlock (W, W_prime)
 XOR (W, W_prime) -> xorBlock (W, W_prime)
 XOR_prime (buildPair (W, W_prime)) -> XOR (W, W_prime)
 CYC (buildBlock (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B9, B10, B11, B12, B13, B14, B15, B16), buildOctet (B17, B18, B19, B20, B21, B22, B23, B24), buildOctet (B25, B26, B27, B28, B29, B30, B31, B32))) -> buildBlock (buildOctet (B2, B3, B4, B5, B6, B7, B8, B9), buildOctet (B10, B11, B12, B13, B14, B15, B16, B17), buildOctet (B18, B19, B20, B21, B22, B23, B24, B25), buildOctet (B26, B27, B28, B29, B30, B31, B32, B1))
 nCYC (zero, W) -> W
 nCYC (succ (N), W) -> CYC (nCYC (N, W))
 FIX1 (W) -> AND (OR (W, x02040801), xBFEF7FDF)
 FIX2 (W) -> AND (OR (W, x00804021), x7DFEFBFF)
 needAdjust (O) -> orBool (eqOctet (O, x00), eqOctet (O, xFF))
 adjustCode (O) -> x1 | REC_EqBool (needAdjust (O), true) -> REC_True
 adjustCode (O) -> x0 | REC_EqBool (needAdjust (O), false) -> REC_True
 adjust (O, O_prime) -> xorOctet (O, O_prime) | REC_EqBool (needAdjust (O), true) -> REC_True
 adjust (O, O_prime) -> O | REC_EqBool (needAdjust (O), false) -> REC_True
 PAT (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) -> buildOctet (adjustCode (O1), adjustCode (O2), adjustCode (O3), adjustCode (O4), adjustCode (O_prime1), adjustCode (O_prime2), adjustCode (O_prime3), adjustCode (O_prime4))
 BYT (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) -> BYT_prime (O1, O2, O3, O4, O_prime1, O_prime2, O_prime3, O_prime4, PAT (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)))
 BYT_prime (O1, O2, O3, O4, O_prime1, O_prime2, O_prime3, O_prime4, Opat) -> buildPair (buildBlock (adjust (O1, rightOctet7 (Opat)), adjust (O2, rightOctet6 (Opat)), adjust (O3, rightOctet5 (Opat)), adjust (O4, rightOctet4 (Opat))), buildBlock (adjust (O_prime1, rightOctet3 (Opat)), adjust (O_prime2, rightOctet2 (Opat)), adjust (O_prime3, rightOctet1 (Opat)), adjust (O_prime4, Opat)))
 ADDC (W, W_prime) -> ADDC_prime (addBlockSum (W, W_prime))
 ADDC_prime (buildBlockSum (x0, W)) -> buildPair (x00000000, W)
 ADDC_prime (buildBlockSum (x1, W)) -> buildPair (x00000001, W)
 MUL1 (W, W_prime) -> MUL1XY (MUL (W, W_prime))
 MUL1XY (buildPair (W, W_prime)) -> MUL1UL (W, W_prime)
 MUL1UL (W, W_prime) -> MUL1SC (ADDC (W, W_prime))
 MUL1SC (buildPair (Wcarry, W)) -> ADD (W, Wcarry)
 MUL2 (W, W_prime) -> MUL2XY (MUL (W, W_prime))
 MUL2XY (buildPair (W, W_prime)) -> MUL2UL (W, W_prime)
 MUL2UL (W, W_prime) -> MUL2DEL (ADDC (W, W), W_prime)
 MUL2DEL (buildPair (Wcarry, W), W_prime) -> MUL2FL (ADD (W, ADD (Wcarry, Wcarry)), W_prime)
 MUL2FL (W, W_prime) -> MUL2SC (ADDC (W, W_prime))
 MUL2SC (buildPair (Wcarry, W)) -> ADD (W, ADD (Wcarry, Wcarry))
 MUL2A (W, W_prime) -> MUL2AXY (MUL (W, W_prime))
 MUL2AXY (buildPair (W, W_prime)) -> MUL2AUL (W, W_prime)
 MUL2AUL (W, W_prime) -> MUL2ADL (ADD (W, W), W_prime)
 MUL2ADL (W, W_prime) -> MUL2ASC (ADDC (W, W_prime))
 MUL2ASC (buildPair (Wcarry, W)) -> ADD (W, ADD (Wcarry, Wcarry))
 squareHalf (H) -> mulHalf (H, H)
 Q (O) -> squareHalf (addHalf (buildHalf (x00, O), x0001))
 J1_2 (W) -> MUL1 (W, W)
 J1_4 (W) -> MUL1 (J1_2 (W), J1_2 (W))
 J1_6 (W) -> MUL1 (J1_2 (W), J1_4 (W))
 J1_8 (W) -> MUL1 (J1_2 (W), J1_6 (W))
 J2_2 (W) -> MUL2 (W, W)
 J2_4 (W) -> MUL2 (J2_2 (W), J2_2 (W))
 J2_6 (W) -> MUL2 (J2_2 (W), J2_4 (W))
 J2_8 (W) -> MUL2 (J2_2 (W), J2_6 (W))
 K1_2 (W) -> MUL1 (W, W)
 K1_4 (W) -> MUL1 (K1_2 (W), K1_2 (W))
 K1_5 (W) -> MUL1 (W, K1_4 (W))
 K1_7 (W) -> MUL1 (K1_2 (W), K1_5 (W))
 K1_9 (W) -> MUL1 (K1_2 (W), K1_7 (W))
 K2_2 (W) -> MUL2 (W, W)
 K2_4 (W) -> MUL2 (K2_2 (W), K2_2 (W))
 K2_5 (W) -> MUL2 (W, K2_4 (W))
 K2_7 (W) -> MUL2 (K2_2 (W), K2_5 (W))
 K2_9 (W) -> MUL2 (K2_2 (W), K2_7 (W))
 H4 (W) -> XOR (J1_4 (W), J2_4 (W))
 H6 (W) -> XOR (J1_6 (W), J2_6 (W))
 H8 (W) -> XOR (J1_8 (W), J2_8 (W))
 H0 (W) -> XOR (K1_5 (W), K2_5 (W))
 H5 (W, O) -> MUL2 (H0 (W), Q (O))
 H7 (W) -> XOR (K1_7 (W), K2_7 (W))
 H9 (W) -> XOR (K1_9 (W), K2_9 (W))
 splitSegment (unitMessage (W)) -> unitSegment (unitMessage (W))
 splitSegment (consMessage (W, M)) -> cutSegment (M, unitMessage (W), n254)
 cutSegment (unitMessage (W), M_prime, N) -> unitSegment (reverseMessage (consMessage (W, M_prime)))
 cutSegment (consMessage (W, M), M_prime, zero) -> consSegment (reverseMessage (consMessage (W, M_prime)), splitSegment (M))
 cutSegment (consMessage (W, M), M_prime, succ (N)) -> cutSegment (M, consMessage (W, M_prime), N)
 preludeXY (W1, W2) -> preludeXY_prime (BYT (W1, W2), PAT (W1, W2))
 preludeVW (W1, W2) -> preludeVW_prime (BYT (W1, W2))
 preludeST (W1, W2) -> preludeST_prime (BYT (W1, W2))
 preludeXY_prime (buildPair (W, W_prime), O) -> BYT (H4 (W), H5 (W_prime, O))
 preludeVW_prime (buildPair (W, W_prime)) -> BYT (H6 (W), H7 (W_prime))
 preludeST_prime (buildPair (W, W_prime)) -> BYT (H8 (W), H9 (W_prime))
 computeXY (P, P_prime, W) -> computeXY_prime (P, W, XOR_prime (computeVW (P_prime)))
 computeXY_prime (buildPair (W1, W2), W, W_prime) -> buildPair (MUL1 (XOR (W1, W), FIX1 (ADD (XOR (W2, W), W_prime))), MUL2A (XOR (W2, W), FIX2 (ADD (XOR (W1, W), W_prime))))
 computeVW (buildPair (W1, W2)) -> buildPair (CYC (W1), W2)
 loop1 (P, P_prime, unitMessage (W)) -> computeXY (P, P_prime, W)
 loop1 (P, P_prime, consMessage (W, M)) -> loop1 (computeXY (P, P_prime, W), computeVW (P_prime), M)
 loop2 (P, P_prime, unitMessage (W)) -> computeVW (P_prime)
 loop2 (P, P_prime, consMessage (W, M)) -> loop2 (computeXY (P, P_prime, W), computeVW (P_prime), M)
 coda (P, P_prime, buildPair (W, W_prime)) -> XOR_prime (computeXY (computeXY (P, P_prime, W), computeVW (P_prime), W_prime))
 MAA (buildKey (W1, W2), M) -> MAA_prime (preludeXY (W1, W2), preludeVW (W1, W2), preludeST (W1, W2), M)
 MAA_prime (P1, P2, P3, M) -> coda (loop1 (P1, P2, M), loop2 (P1, P2, M), P3)
 MAC (K, M) -> MACfirst (K, splitSegment (M))
 MACfirst (K, unitSegment (M)) -> MAA (K, M)
 MACfirst (K, consSegment (M, S)) -> MACnext (K, MAA (K, M), S)
 MACnext (K, W, unitSegment (M)) -> MAA (K, consMessage (W, M))
 MACnext (K, W, consSegment (M, S)) -> MACnext (K, MAA (K, consMessage (W, M)), S)
)
(VAR REC_M REC_N REC_X REC_Y REC_X1 REC_Y1 REC_X2 REC_Y2 REC_X3 REC_Y3 REC_X4 REC_Y4 REC_X5 REC_Y5 REC_X6 REC_Y6 REC_X7 REC_Y7 REC_X8 REC_Y8)
(RULES
 REC_Not (REC_False) -> REC_True
 REC_Not (REC_True) -> REC_False
 REC_And (REC_False, REC_False) -> REC_False
 REC_And (REC_False, REC_True) -> REC_False
 REC_And (REC_True, REC_False) -> REC_False
 REC_And (REC_True, REC_True) -> REC_True
 REC_Ne (REC_Zero, REC_Zero) -> REC_False
 REC_Ne (REC_Zero, REC_Succ (REC_M)) -> REC_True
 REC_Ne (REC_Succ (REC_M), REC_Zero) -> REC_True
 REC_Ne (REC_Succ (REC_M), REC_Succ (REC_N)) -> REC_Ne (REC_M, REC_N)
 REC_RankBool (false) -> REC_Zero
 REC_EqBool (false, false) -> REC_True
 REC_RankBool (true) -> REC_Succ (REC_Zero)
 REC_EqBool (true, true) -> REC_True
 REC_RankBit (x0) -> REC_Zero
 REC_EqBit (x0, x0) -> REC_True
 REC_RankBit (x1) -> REC_Succ (REC_Zero)
 REC_EqBit (x1, x1) -> REC_True
 REC_RankOctet (buildOctet (REC_X1, REC_X2, REC_X3, REC_X4, REC_X5, REC_X6, REC_X7, REC_X8)) -> REC_Zero
 REC_EqOctet (buildOctet (REC_X1, REC_X2, REC_X3, REC_X4, REC_X5, REC_X6, REC_X7, REC_X8), buildOctet (REC_Y1, REC_Y2, REC_Y3, REC_Y4, REC_Y5, REC_Y6, REC_Y7, REC_Y8)) -> REC_And (REC_EqBit (REC_X1, REC_Y1), REC_And (REC_EqBit (REC_X2, REC_Y2), REC_And (REC_EqBit (REC_X3, REC_Y3), REC_And (REC_EqBit (REC_X4, REC_Y4), REC_And (REC_EqBit (REC_X5, REC_Y5), REC_And (REC_EqBit (REC_X6, REC_Y6), REC_And (REC_EqBit (REC_X7, REC_Y7), REC_EqBit (REC_X8, REC_Y8))))))))
 REC_RankOctetSum (buildOctetSum (REC_X1, REC_X2)) -> REC_Zero
 REC_EqOctetSum (buildOctetSum (REC_X1, REC_X2), buildOctetSum (REC_Y1, REC_Y2)) -> REC_And (REC_EqBit (REC_X1, REC_Y1), REC_EqOctet (REC_X2, REC_Y2))
 REC_RankHalf (buildHalf (REC_X1, REC_X2)) -> REC_Zero
 REC_EqHalf (buildHalf (REC_X1, REC_X2), buildHalf (REC_Y1, REC_Y2)) -> REC_And (REC_EqOctet (REC_X1, REC_Y1), REC_EqOctet (REC_X2, REC_Y2))
 REC_RankHalfSum (buildHalfSum (REC_X1, REC_X2)) -> REC_Zero
 REC_EqHalfSum (buildHalfSum (REC_X1, REC_X2), buildHalfSum (REC_Y1, REC_Y2)) -> REC_And (REC_EqBit (REC_X1, REC_Y1), REC_EqHalf (REC_X2, REC_Y2))
 REC_RankBlock (buildBlock (REC_X1, REC_X2, REC_X3, REC_X4)) -> REC_Zero
 REC_EqBlock (buildBlock (REC_X1, REC_X2, REC_X3, REC_X4), buildBlock (REC_Y1, REC_Y2, REC_Y3, REC_Y4)) -> REC_And (REC_EqOctet (REC_X1, REC_Y1), REC_And (REC_EqOctet (REC_X2, REC_Y2), REC_And (REC_EqOctet (REC_X3, REC_Y3), REC_EqOctet (REC_X4, REC_Y4))))
 REC_RankBlockSum (buildBlockSum (REC_X1, REC_X2)) -> REC_Zero
 REC_EqBlockSum (buildBlockSum (REC_X1, REC_X2), buildBlockSum (REC_Y1, REC_Y2)) -> REC_And (REC_EqBit (REC_X1, REC_Y1), REC_EqBlock (REC_X2, REC_Y2))
 REC_RankPair (buildPair (REC_X1, REC_X2)) -> REC_Zero
 REC_EqPair (buildPair (REC_X1, REC_X2), buildPair (REC_Y1, REC_Y2)) -> REC_And (REC_EqBlock (REC_X1, REC_Y1), REC_EqBlock (REC_X2, REC_Y2))
 REC_RankNat (zero) -> REC_Zero
 REC_EqNat (zero, zero) -> REC_True
 REC_RankNat (succ (REC_X1)) -> REC_Succ (REC_Zero)
 REC_EqNat (succ (REC_X1), succ (REC_Y1)) -> REC_EqNat (REC_X1, REC_Y1)
 REC_RankKey (buildKey (REC_X1, REC_X2)) -> REC_Zero
 REC_EqKey (buildKey (REC_X1, REC_X2), buildKey (REC_Y1, REC_Y2)) -> REC_And (REC_EqBlock (REC_X1, REC_Y1), REC_EqBlock (REC_X2, REC_Y2))
 REC_RankMessage (unitMessage (REC_X1)) -> REC_Zero
 REC_EqMessage (unitMessage (REC_X1), unitMessage (REC_Y1)) -> REC_EqBlock (REC_X1, REC_Y1)
 REC_RankMessage (consMessage (REC_X1, REC_X2)) -> REC_Succ (REC_Zero)
 REC_EqMessage (consMessage (REC_X1, REC_X2), consMessage (REC_Y1, REC_Y2)) -> REC_And (REC_EqBlock (REC_X1, REC_Y1), REC_EqMessage (REC_X2, REC_Y2))
 REC_RankSegmentedMessage (unitSegment (REC_X1)) -> REC_Zero
 REC_EqSegmentedMessage (unitSegment (REC_X1), unitSegment (REC_Y1)) -> REC_EqMessage (REC_X1, REC_Y1)
 REC_RankSegmentedMessage (consSegment (REC_X1, REC_X2)) -> REC_Succ (REC_Zero)
 REC_EqSegmentedMessage (consSegment (REC_X1, REC_X2), consSegment (REC_Y1, REC_Y2)) -> REC_And (REC_EqMessage (REC_X1, REC_Y1), REC_EqSegmentedMessage (REC_X2, REC_Y2))
 REC_EqBool (REC_X, REC_Y) -> REC_False | REC_Ne (REC_RankBool (REC_X), REC_RankBool (REC_Y)) -> REC_True
 REC_EqNat (REC_X, REC_Y) -> REC_False | REC_Ne (REC_RankNat (REC_X), REC_RankNat (REC_Y)) -> REC_True
 REC_EqBit (REC_X, REC_Y) -> REC_False | REC_Ne (REC_RankBit (REC_X), REC_RankBit (REC_Y)) -> REC_True
 REC_EqOctet (REC_X, REC_Y) -> REC_False | REC_Ne (REC_RankOctet (REC_X), REC_RankOctet (REC_Y)) -> REC_True
 REC_EqOctetSum (REC_X, REC_Y) -> REC_False | REC_Ne (REC_RankOctetSum (REC_X), REC_RankOctetSum (REC_Y)) -> REC_True
 REC_EqHalf (REC_X, REC_Y) -> REC_False | REC_Ne (REC_RankHalf (REC_X), REC_RankHalf (REC_Y)) -> REC_True
 REC_EqHalfSum (REC_X, REC_Y) -> REC_False | REC_Ne (REC_RankHalfSum (REC_X), REC_RankHalfSum (REC_Y)) -> REC_True
 REC_EqBlock (REC_X, REC_Y) -> REC_False | REC_Ne (REC_RankBlock (REC_X), REC_RankBlock (REC_Y)) -> REC_True
 REC_EqBlockSum (REC_X, REC_Y) -> REC_False | REC_Ne (REC_RankBlockSum (REC_X), REC_RankBlockSum (REC_Y)) -> REC_True
 REC_EqPair (REC_X, REC_Y) -> REC_False | REC_Ne (REC_RankPair (REC_X), REC_RankPair (REC_Y)) -> REC_True
 REC_EqKey (REC_X, REC_Y) -> REC_False | REC_Ne (REC_RankKey (REC_X), REC_RankKey (REC_Y)) -> REC_True
 REC_EqMessage (REC_X, REC_Y) -> REC_False | REC_Ne (REC_RankMessage (REC_X), REC_RankMessage (REC_Y)) -> REC_True
 REC_EqSegmentedMessage (REC_X, REC_Y) -> REC_False | REC_Ne (REC_RankSegmentedMessage (REC_X), REC_RankSegmentedMessage (REC_Y)) -> REC_True
)
