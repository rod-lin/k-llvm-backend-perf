
INSTRUCTIONS (PART 1)
=====================

-- Hubert Garavel -- May 2016

How to use these scripts:

1) add the ./com directory to your path

PATH="$PATH:.../Gforge/2015-CONVECS/com"



2) To translate a REC model (e.g. mergesort.rec) in all the target languages

rec REC/mergesort.rec 

To translate all the REC benchmarks

rec REC/*.rec


3) To compare the files generated by the previous command against the 
reference files stored in ./MAUDE, ./HASKELL, etc.

rec_diff mergesort.*

This will install the files if they do not exist already



4) To clean up the generated files

rec_clean 


=============================================================================

INSTRUCTIONS (PART 2)
=====================

-- Hubert Garavel -- May 2017

- The tools associated to the REC project work on Linux x86 or x64.
  They have been tested on Debian 7 and Debian 8, but other versions
  of Linux are probably ok too.

- First, you should download the REC commands and documentation
	mkdir REC
	cd REC
	svn checkout svn://scm.gforge.inria.fr/svnroot/rec/2015-CONVECS/com
	svn checkout svn://scm.gforge.inria.fr/svnroot/rec/2015-CONVECS/doc
	svn checkout svn://scm.gforge.inria.fr/svnroot/rec/2015-CONVECS/install

- First, you should choose which back-end tool(s) you want to use
  to execute the specifications written in the REC languages.

- So far, the following back-end tools and languages are supported
  Clean, Haskell, LNT, LOTOS, MAUDE, MCRL2, OCAML, OPAL, RASCAL,
  SCALA, SML, STRATEGO, TOM.

  In the sequel, we assume you have chosen Haskell, Maude, and Ocaml

- Then, you have to install the chose back-end tools on your machine.
  Refer to the documentation specific to each back-end tool.
  Some additional indications are also given in the directory
  "install", which can also be browsed from
    https://gforge.inria.fr/scm/viewvc.php/rec/2015-CONVECS/install/

- The documentation of the REC format can be found in the "doc"
  directory.

- Modify your $PATH variable to add the "com" directory
	PATH="$PATH:xxxxxxxxxxx/REC/com"
  (replace xxxxxxxxxxxx with the appropriate pathname)

- Once you have written some example, e.g., test.rec, you can
  convert it to the selected back-end languages
	rec -haskell test.rec   # generates test.hs
	rec -maude test.rec     # generates test.maude
	rec -ocaml test.rec     # generates test.ml

- Then, to execute the generated programs easily, you should
  edit the program "com/run" and modify the values of environment
  variables $HASKELL, $MAUDE, $OCAML, etc. Look in com/rec for
  places where the command "hostname" is used, and add cases
  corresponding to the name of your own machine.

- Then, you can simply execute the command
	run test.hs
	run test.maude
	run test.ml

- Directives to produce a REC specification that is correct and portable 
  across the various "back-end" languages can be found in 
    https://gforge.inria.fr/scm/viewvc.php/rec/2015-CONVECS/doc/REC_LANGUAGE


