local

datatype nat = D0 | S of nat | P | N ;

in

datatype nat = D0 | S of nat | P | N ;

fun print_Nat (rec_x:nat) =
   case rec_x of
   D0 => (
      print "D0"
   ) | S rec_x1 => (
      print "S";
      print " (";
      print_Nat rec_x1;
      print ")"
   ) | P => (
      print "P"
   ) | N => (
      print "N"
   )

fun d1() : nat = S (D0)

fun c (rec_x1:nat, rec_x2:nat) : nat =
   case (rec_x1, rec_x2) of
     (D0, y) => y
   | (S (x), y) => S (c (x,y))

and f (rec_x1:nat, rec_x2:nat, rec_x3:nat, rec_x4:nat, rec_x5:nat) : nat =
   case (rec_x1, rec_x2, rec_x3, rec_x4, rec_x5) of
     (x, y, S (z), t, u) => f (x, y, z, c (t, t), u)
   | (x, S (y), D0, t, u) => f (x, y, P, t, t)
   | (S (x), D0, D0, t, u) => f (x, N, P, d1(), D0)
   | (D0, D0, D0, t, u) => t
   | (x, S (y), P, t, u) => f (x, y, P, t, S (u))
   | (x, D0, P, t, u) => f (x, N, P, S (t), u)
   | (S (x), N, P, t, u) => f (x, N, P, t, u)
   | (D0, N, P, t, u) => u

fun main () = (
   print_Nat (f (S (S (S (S (S (S (D0)))))), S (S (S (S (S (D0))))), S (S (D0)), D0, d1()));
   print "\n";
   print_Nat (f (S (S (S (S (D0)))), S (S (S (D0))), S (S (S (S (S (D0))))), D0, d1()));
   print "\n";
   OS.Process.exit (OS.Process.success)
)

val _ = main ()

end
