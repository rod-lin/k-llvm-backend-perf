IMPLEMENTATION garbagecollection

DATA xnat == 
     D0
     S (rec_x1 : xnat)
     P
     N

FUN =  : xnat ** xnat -> bool
FUN |= : xnat ** xnat -> bool
FUN print : xnat -> com[void]

DEF _ = :xnat**xnat->bool _ == false

DEF rec_x |= :xnat**xnat->bool rec_y == not (rec_x = rec_y)

DEF D0 = :xnat**xnat->bool D0 == true

DEF print (D0) == write (stdOut, "D0")

DEF S (rec_x1) = :xnat**xnat->bool S (rec_y1) == (rec_x1 = rec_y1)

DEF print (S (rec_x1)) ==
    (write (stdOut, "S");
    write (stdOut, " (");
    print (rec_x1);
    write (stdOut, ")"))

DEF P = :xnat**xnat->bool P == true

DEF print (P) == write (stdOut, "P")

DEF N = :xnat**xnat->bool N == true

DEF print (N) == write (stdOut, "N")

FUN d1 : xnat
FUN f : xnat ** xnat ** xnat ** xnat ** xnat -> xnat 
FUN c : xnat ** xnat -> xnat 

DEF d1 == S (D0)

DEF c (D0, y) == y
DEF c (S (x), y) == S (c (x,y))

DEF f (x, y, S (z), t, u) == f (x, y, z, c (t, t), u)
DEF f (x, S (y), D0, t, u) == f (x, y, P, t, t)
DEF f (S (x), D0, D0, t, u) == f (x, N, P, d1, D0)
DEF f (D0, D0, D0, t, u) == t
DEF f (x, S (y), P, t, u) == f (x, y, P, t, S (u))
DEF f (x, D0, P, t, u) == f (x, N, P, S (t), u)
DEF f (S (x), N, P, t, u) == f (x, N, P, t, u)
DEF f (D0, N, P, t, u) == u

DEF main ==
    print (f (S (S (S (S (S (S (D0)))))), S (S (S (S (S (D0))))), S (S (D0)), D0, d1));
    write (stdOut, newline);
    print (f (S (S (S (S (D0)))), S (S (S (D0))), S (S (S (S (S (D0))))), D0, d1));
    write (stdOut, newline);
    exit (0)
