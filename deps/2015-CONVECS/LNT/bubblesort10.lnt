module BubbleSort10 is

type Xbool is 
   Xtrue,
   Xfalse
with "==", "!="
end type

type Xnat is 
   d0,
   s (rec_x1_1:Xnat)
with "==", "!="
end type

type NatList is 
   nil,
   cons (rec_x1_1:Xnat, rec_x1_2:NatList)
with "==", "!="
end type

function d10 : Xnat is
   return s (s (s (s (s (s (s (s (s (s (d0))))))))))
end function

function lt (rec_x1:Xnat, rec_x2:Xnat) : Xbool is
   case rec_x1, rec_x2 in
   var M:Xnat, N:Xnat in
     d0,d0 -> return Xfalse
   | d0, s (N) -> return Xtrue
   | s (N), d0 -> return Xfalse
   | s (N), s (M) -> return lt (N, M)
   end case
end function

function plus (rec_x1:Xnat, rec_x2:Xnat) : Xnat is
   case rec_x1, rec_x2 in
   var M:Xnat, N:Xnat in
     d0, N -> return N
   | s (N), M -> return s (plus (N, M))
   end case
end function

function times (rec_x1:Xnat, rec_x2:Xnat) : Xnat is
   case rec_x1, rec_x2 in
   var M:Xnat, N:Xnat in
     d0, N -> return d0
   | s (N), M -> return plus (M, times (N, M))
   end case
end function

function fact (rec_x1:Xnat) : Xnat is
   case rec_x1 in
   var N:Xnat in
     d0 -> return s (d0)
   | s (N) -> return times (s (N), fact (N))
   end case
end function

function rev (rec_x1:Xnat) : NatList is
   case rec_x1 in
   var N:Xnat in
     s (N) -> return bubsort (s (N), rev (N))
   | d0 -> return cons (d0, nil)
   end case
end function

function bubsort (rec_x1:Xnat, rec_x2:NatList) : NatList is
   case rec_x1, rec_x2 in
   var L:NatList, M:Xnat, N:Xnat in
     N, nil -> return cons (N, nil)
   | N, cons (M, L) where (lt (M, N) == Xtrue) -> return cons (M, bubsort (N, L))
   | N, cons (M, L) where (lt (M, N) == Xfalse) -> return cons (N, bubsort (M, L))
   end case
end function

process MAIN [PRINT:any] is
   PRINT (rev (d10));
   stop
end process

end module
