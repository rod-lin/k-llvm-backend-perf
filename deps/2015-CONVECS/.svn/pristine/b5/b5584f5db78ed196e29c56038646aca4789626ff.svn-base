local

datatype disk = D0 | D1 | D2 | D3 | D4 | D5 | D6 | D7 | D8 | D9 | D10 | D11 | D12 | D13 | D14 | D15 | D16 | D17 | D18 | D19 | D20

and tower = A | B | C

and move = Movedisk of disk * tower * tower

and list = Nil | Xcons of move * list ;

in

datatype disk = D0 | D1 | D2 | D3 | D4 | D5 | D6 | D7 | D8 | D9 | D10 | D11 | D12 | D13 | D14 | D15 | D16 | D17 | D18 | D19 | D20

and tower = A | B | C

and move = Movedisk of disk * tower * tower

and list = Nil | Xcons of move * list ;

fun print_Disk (rec_x:disk) =
   case rec_x of
   D0 => (
      print "D0"
   ) | D1 => (
      print "D1"
   ) | D2 => (
      print "D2"
   ) | D3 => (
      print "D3"
   ) | D4 => (
      print "D4"
   ) | D5 => (
      print "D5"
   ) | D6 => (
      print "D6"
   ) | D7 => (
      print "D7"
   ) | D8 => (
      print "D8"
   ) | D9 => (
      print "D9"
   ) | D10 => (
      print "D10"
   ) | D11 => (
      print "D11"
   ) | D12 => (
      print "D12"
   ) | D13 => (
      print "D13"
   ) | D14 => (
      print "D14"
   ) | D15 => (
      print "D15"
   ) | D16 => (
      print "D16"
   ) | D17 => (
      print "D17"
   ) | D18 => (
      print "D18"
   ) | D19 => (
      print "D19"
   ) | D20 => (
      print "D20"
   )

and print_Tower (rec_x:tower) =
   case rec_x of
   A => (
      print "A"
   ) | B => (
      print "B"
   ) | C => (
      print "C"
   )

and print_Move (rec_x:move) =
   case rec_x of
   Movedisk (rec_x1, rec_x2, rec_x3) => (
      print "Movedisk";
      print " (";
      print_Disk rec_x1;
       print ",";
      print_Tower rec_x2;
       print ",";
      print_Tower rec_x3;
      print ")"
   )

and print_List (rec_x:list) =
   case rec_x of
   Nil => (
      print "Nil"
   ) | Xcons (rec_x1, rec_x2) => (
      print "Xcons";
      print " (";
      print_Move rec_x1;
       print ",";
      print_List rec_x2;
      print ")"
   )

fun dec (rec_x1:disk) : disk =
   case (rec_x1) of
     (D20) => D19
   | (D19) => D18
   | (D18) => D17
   | (D17) => D16
   | (D16) => D15
   | (D15) => D14
   | (D14) => D13
   | (D13) => D12
   | (D12) => D11
   | (D11) => D10
   | (D10) => D9
   | (D9) => D8
   | (D8) => D7
   | (D7) => D6
   | (D6) => D5
   | (D5) => D4
   | (D4) => D3
   | (D3) => D2
   | (D2) => D1
   | (D1) => D0

and other (rec_x1:tower, rec_x2:tower) : tower =
   case (rec_x1, rec_x2) of
     (A, B) => C
   | (B, A) => C
   | (A, C) => B
   | (C, A) => B
   | (B, C) => A
   | (C, B) => A

and conc (rec_x1:list, rec_x2:list) : list =
   case (rec_x1, rec_x2) of
     (Nil, l) => l
   | (l, Nil) => l
   | (Xcons (h, t), l) => Xcons (h, conc (t, l))

and solve (rec_x1:tower, rec_x2:tower, rec_x3:disk) : list =
   case (rec_x1, rec_x2, rec_x3) of
     (oRG, dEST, D0) => Nil
   | (oRG, dEST, d) where d <> D0 => conc (solve (oRG, other (oRG, dEST), dec (d)), Xcons (Movedisk (d, oRG, dEST), solve (other (oRG, dEST), dEST, dec (d))))

fun main () = (
   print_List (solve (A, B, D12));
   print "\n";
   OS.Process.exit (OS.Process.success)
)

val _ = main ()

end
