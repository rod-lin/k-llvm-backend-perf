module MergeSort10 is

type Xbool is 
   Xtrue,
   Xfalse
with "==", "!="
end type

type Xnat is 
   d0,
   s (rec_x1_1:Xnat)
with "==", "!="
end type

type NatList is 
   nil,
   cons (rec_x1_1:Xnat, rec_x1_2:NatList)
with "==", "!="
end type

type ListPair is 
   pair (rec_x1_1:NatList, rec_x1_2:NatList)
with "==", "!="
end type

function d10 : Xnat is
   return s (s (s (s (s (s (s (s (s (s (d0))))))))))
end function

function lte (rec_x1:Xnat, rec_x2:Xnat) : Xbool is
   case rec_x1, rec_x2 in
   var M:Xnat, N:Xnat in
     d0, s (N) -> return Xtrue
   | s (N), d0 -> return Xfalse
   | d0, d0 -> return Xtrue
   | s (N), s (M) -> return lte (N, M)
   end case
end function

function plus (rec_x1:Xnat, rec_x2:Xnat) : Xnat is
   case rec_x1, rec_x2 in
   var M:Xnat, N:Xnat in
     d0, N -> return N
   | s (N), M -> return s (plus (N, M))
   end case
end function

function times (rec_x1:Xnat, rec_x2:Xnat) : Xnat is
   case rec_x1, rec_x2 in
   var M:Xnat, N:Xnat in
     d0, N -> return d0
   | s (N), M -> return plus (M, times (N, M))
   end case
end function

function rev (rec_x1:Xnat) : NatList is
   case rec_x1 in
   var N:Xnat in
     s (N) -> return cons (s (N), rev (N))
   | d0 -> return cons (d0, nil)
   end case
end function

function merge (rec_x1:NatList, rec_x2:NatList) : NatList is
   case rec_x1, rec_x2 in
   var L1:NatList, L2:NatList, L:NatList, X:Xnat, Y:Xnat in
     nil, L -> return L
   | L, nil -> return L
   | cons (X, L1), cons (Y, L2) where (lte (X, Y) == Xtrue) -> return cons (X, merge (L1, cons (Y, L2)))
   | cons (X, L1), cons (Y, L2) where (lte (X, Y) == Xfalse) -> return cons (Y, merge (cons (X, L1), L2))
   end case
end function

function split (rec_x1:NatList) : ListPair is
   case rec_x1 in
   var L:NatList, X:Xnat, Y:Xnat in
     cons (X, cons (Y, L)) -> return pair (cons (X, p1 (split (L))), cons (Y, p2 (split (L))))
   | nil -> return pair (nil, nil)
   | cons (X, nil) -> return pair (cons (X, nil), nil)
   end case
end function

function mergesort (rec_x1:NatList) : NatList is
   case rec_x1 in
   var L:NatList, X:Xnat, Y:Xnat in
     nil -> return nil
   | cons (X, nil) -> return cons (X, nil)
   | cons (X, cons (Y, L)) -> return merge (mergesort (cons (X, p1 (split (L)))), mergesort (cons (Y, p2 (split (L)))))
   end case
end function

function p1 (rec_x1:ListPair) : NatList is
   case rec_x1 in
   var L1:NatList, L2:NatList in
     pair (L1, L2) -> return L1
   end case
end function

function p2 (rec_x1:ListPair) : NatList is
   case rec_x1 in
   var L1:NatList, L2:NatList in
     pair (L1, L2) -> return L2
   end case
end function

process MAIN [PRINT:any] is
   PRINT (mergesort (rev (d10)));
   stop
end process

end module
