specification MERGESORT100 [PRINT] : noexit
library BOOLEAN endlib
type LOTOS_TYPE is BOOLEAN
sorts
  Xbool, Nat, NatList, ListPair
opns
  _==_, _/=_ : Xbool, Xbool -> BOOL
  _==_, _/=_ : Nat, Nat -> BOOL
  _==_, _/=_ : NatList, NatList -> BOOL
  _==_, _/=_ : ListPair, ListPair -> BOOL
  Xtrue (*! constructor *) : -> Xbool 
  Xfalse (*! constructor *) : -> Xbool 
  d0 (*! constructor *) : -> Nat 
  s (*! constructor *) : Nat -> Nat 
  nil (*! constructor *) : -> NatList 
  cons (*! constructor *) : Nat, NatList -> NatList 
  pair (*! constructor *) : NatList, NatList -> ListPair 
  d10 : -> Nat 
  lte : Nat, Nat -> Xbool 
  plus : Nat, Nat -> Nat 
  times : Nat, Nat -> Nat 
  rev : Nat -> NatList 
  split : NatList -> ListPair 
  merge : NatList, NatList -> NatList 
  mergesort : NatList -> NatList 
  p1 : ListPair -> NatList 
  p2 : ListPair -> NatList 
eqns
forall
  X, Y, N, M : Nat ,
  L1, L2, L : NatList ,
  REC_Xbool_X, REC_Xbool_Y : Xbool,
  REC_Nat_X, REC_Nat_Y : Nat,
  REC_NatList_X, REC_NatList_Y : NatList,
  REC_ListPair_X, REC_ListPair_Y : ListPair
ofsort BOOL
  REC_Xbool_X == REC_Xbool_X = TRUE;
  (* otherwise *) REC_Xbool_X == REC_Xbool_Y = FALSE;
ofsort BOOL
  REC_Xbool_X /= REC_Xbool_X = FALSE;
  (* otherwise *) REC_Xbool_X /= REC_Xbool_Y = TRUE;
ofsort BOOL
  REC_Nat_X == REC_Nat_X = TRUE;
  (* otherwise *) REC_Nat_X == REC_Nat_Y = FALSE;
ofsort BOOL
  REC_Nat_X /= REC_Nat_X = FALSE;
  (* otherwise *) REC_Nat_X /= REC_Nat_Y = TRUE;
ofsort BOOL
  REC_NatList_X == REC_NatList_X = TRUE;
  (* otherwise *) REC_NatList_X == REC_NatList_Y = FALSE;
ofsort BOOL
  REC_NatList_X /= REC_NatList_X = FALSE;
  (* otherwise *) REC_NatList_X /= REC_NatList_Y = TRUE;
ofsort BOOL
  REC_ListPair_X == REC_ListPair_X = TRUE;
  (* otherwise *) REC_ListPair_X == REC_ListPair_Y = FALSE;
ofsort BOOL
  REC_ListPair_X /= REC_ListPair_X = FALSE;
  (* otherwise *) REC_ListPair_X /= REC_ListPair_Y = TRUE;
ofsort Nat
  d10 = s (s (s (s (s (s (s (s (s (s (d0))))))))));
ofsort Xbool
  lte (d0, s (N)) = Xtrue;
  lte (s (N), d0) = Xfalse;
  lte (d0, d0) = Xtrue;
  lte (s (N), s (M)) = lte (N, M);
ofsort Nat
  plus (d0, N) = N;
  plus (s (N), M) = s (plus (N, M));
  times (d0, N) = d0;
  times (s (N), M) = plus (M, times (N, M));
ofsort NatList
  rev (s (N)) = cons (s (N), rev (N));
  rev (d0) = cons (d0, nil);
  merge (nil, L) = L;
  merge (L, nil) = L;
  lte (X, Y) == Xtrue => merge (cons (X, L1), cons (Y, L2)) = cons (X, merge (L1, cons (Y, L2)));
  lte (X, Y) == Xfalse => merge (cons (X, L1), cons (Y, L2)) = cons (Y, merge (cons (X, L1), L2));
ofsort ListPair
  split (cons (X, cons (Y, L))) = pair (cons (X, p1 (split (L))), cons (Y, p2 (split (L))));
  split (nil) = pair (nil, nil);
  split (cons (X, nil)) = pair (cons (X, nil), nil);
ofsort NatList
  mergesort (nil) = nil;
  mergesort (cons (X, nil)) = cons (X, nil);
  mergesort (cons (X, cons (Y, L))) = merge (mergesort (cons (X, p1 (split (L)))), mergesort (cons (Y, p2 (split (L)))));
  p1 (pair (L1, L2)) = L1;
  p2 (pair (L1, L2)) = L2;
endtype
behaviour
  PRINT !mergesort (rev (times (d10, d10)));
  stop
endspec
