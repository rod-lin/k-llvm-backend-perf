local

datatype boolean = Xtrue | Xfalse

and nat = Zero | S of nat

and sNat = Exz | Exone | Exs of sNat | Explus of sNat * sNat | Exmult of sNat * sNat | Exexp of sNat * sNat

and tree = Leaf of nat | Node of nat * nat * tree * tree ;

in

datatype boolean = Xtrue | Xfalse

and nat = Zero | S of nat

and sNat = Exz | Exone | Exs of sNat | Explus of sNat * sNat | Exmult of sNat * sNat | Exexp of sNat * sNat

and tree = Leaf of nat | Node of nat * nat * tree * tree ;

fun print_Boolean (rec_x:boolean) =
   case rec_x of
   Xtrue => (
      print "Xtrue"
   ) | Xfalse => (
      print "Xfalse"
   )

and print_Nat (rec_x:nat) =
   case rec_x of
   Zero => (
      print "Zero"
   ) | S rec_x1 => (
      print "S";
      print " (";
      print_Nat rec_x1;
      print ")"
   )

and print_SNat (rec_x:sNat) =
   case rec_x of
   Exz => (
      print "Exz"
   ) | Exone => (
      print "Exone"
   ) | Exs rec_x1 => (
      print "Exs";
      print " (";
      print_SNat rec_x1;
      print ")"
   ) | Explus (rec_x1, rec_x2) => (
      print "Explus";
      print " (";
      print_SNat rec_x1;
       print ",";
      print_SNat rec_x2;
      print ")"
   ) | Exmult (rec_x1, rec_x2) => (
      print "Exmult";
      print " (";
      print_SNat rec_x1;
       print ",";
      print_SNat rec_x2;
      print ")"
   ) | Exexp (rec_x1, rec_x2) => (
      print "Exexp";
      print " (";
      print_SNat rec_x1;
       print ",";
      print_SNat rec_x2;
      print ")"
   )

and print_Tree (rec_x:tree) =
   case rec_x of
   Leaf rec_x1 => (
      print "Leaf";
      print " (";
      print_Nat rec_x1;
      print ")"
   ) | Node (rec_x1, rec_x2, rec_x3, rec_x4) => (
      print "Node";
      print " (";
      print_Nat rec_x1;
       print ",";
      print_Nat rec_x2;
       print ",";
      print_Tree rec_x3;
       print ",";
      print_Tree rec_x4;
      print ")"
   )

fun yor (rec_x1:boolean, rec_x2:boolean) : boolean =
   case (rec_x1, rec_x2) of
     (Xtrue, b) => Xtrue
   | (Xfalse, b) => b

and xand (rec_x1:boolean, rec_x2:boolean) : boolean =
   case (rec_x1, rec_x2) of
     (Xtrue, b) => b
   | (Xfalse, b) => Xfalse

and neg (rec_x1:boolean) : boolean =
   case (rec_x1) of
     (Xfalse) => Xtrue
   | (Xtrue) => Xfalse

fun d0() : nat = Zero

fun d1() : nat = S (d0())

fun d2() : nat = S (d1())

fun d3() : nat = S (d2())

fun d4() : nat = S (d3())

fun d5() : nat = S (d4())

fun d6() : nat = S (d5())

fun d7() : nat = S (d6())

fun d8() : nat = S (d7())

fun d9() : nat = S (d8())

fun d10() : nat = S (d9())

fun d11() : nat = S (d10())

fun d12() : nat = S (d11())

fun d13() : nat = S (d12())

fun d14() : nat = S (d13())

fun d15() : nat = S (d14())

fun d16() : nat = S (d15())

fun d17() : nat = S (d16())

fun one() : sNat = Exs (Exz)

fun two() : sNat = Exs (one())

fun three() : sNat = Exs (two())

fun four() : sNat = Exs (three())

fun five() : sNat = Exs (four())

fun six() : sNat = Exs (five())

fun seven() : sNat = Exs (six())

fun eight() : sNat = Exs (seven())

fun nine() : sNat = Exs (eight())

fun ten() : sNat = Exs (nine())

fun eleven() : sNat = Exs (ten())

fun twelve() : sNat = Exs (eleven())

fun thirteen() : sNat = Exs (twelve())

fun fourteen() : sNat = Exs (thirteen())

fun fifteen() : sNat = Exs (fourteen())

fun sixteen() : sNat = Exs (fifteen())

fun seventeen() : sNat = Exs (sixteen())

fun eighteen() : sNat = Exs (seventeen())

fun nineteen() : sNat = Exs (eighteen())

fun twenty() : sNat = Exs (nineteen())

fun twentyone() : sNat = Exs (twenty())

fun twentytwo() : sNat = Exs (twentyone())

fun twentythree() : sNat = Exs (twentytwo())

fun twentyfour() : sNat = Exs (twentythree())

fun twentyfive() : sNat = Exs (twentyfour())

fun twentysix() : sNat = Exs (twentyfive())

fun twentyseven() : sNat = Exs (twentysix())

fun twentyeight() : sNat = Exs (twentyseven())

fun twentynine() : sNat = Exs (twentyeight())

fun thirty() : sNat = Exs (twentynine())

fun thirtyone() : sNat = Exs (thirty())

fun thirtytwo() : sNat = Exs (thirtyone())

fun thirtythree() : sNat = Exs (thirtytwo())

fun thirtyfour() : sNat = Exs (thirtythree())

fun thirtyfive() : sNat = Exs (thirtyfour())

fun dec (rec_x1:sNat) : sNat =
   case (rec_x1) of
     (Exexp (xs,Exz)) => Exs (Exz)
   | (Exexp (xs,Exs (ys))) => Exmult (Exexp (xs,ys),xs)
   | (Exexp (xs,Explus (ys,zs))) => Exmult (Exexp (xs,ys),Exexp (xs,zs))
   | (Exexp (xs,Exmult (ys,zs))) => dec (Exexp (Exexp (xs,ys),zs))
   | (Exexp (xs,Exexp (ys,zs))) => dec (Exexp (xs, dec (Exexp (ys,zs))))

and benchevalsym17 (rec_x1:sNat) : boolean =
   case (rec_x1) of
     (xs) => equal (eval17 (Exexp (two(), xs)), evalsym17 (Exexp (two(), xs)))

and benchevalexp17 (rec_x1:sNat) : boolean =
   case (rec_x1) of
     (xs) => equal (eval17 (Exexp (two(), xs)), evalexp17 (Exexp (two(), xs)))

and benchevaltree17 (rec_x1:sNat) : boolean =
   case (rec_x1) of
     (xs) => equal (calctree17 (eval (xs)), getval (buildtree (eval (xs), Zero)))

and equal (rec_x1:nat, rec_x2:nat) : boolean =
   case (rec_x1, rec_x2) of
     (Zero, Zero) => Xtrue
   | (Zero, S (x)) => Xfalse
   | (S (x), Zero) => Xfalse
   | (S (x), S (y)) => equal (x, y)

and less (rec_x1:nat, rec_x2:nat) : boolean =
   case (rec_x1, rec_x2) of
     (Zero, y) => Xtrue
   | (S (x), S (y)) => less (x, y)
   | (S (x), Zero) => Xfalse

and plus (rec_x1:nat, rec_x2:nat) : nat =
   case (rec_x1, rec_x2) of
     (x, Zero) => x
   | (x, S (y)) => S (plus (x, y))

and mult (rec_x1:nat, rec_x2:nat) : nat =
   case (rec_x1, rec_x2) of
     (x, Zero) => Zero
   | (x, S (y)) => plus (mult (x, y), x)

and exp (rec_x1:nat, rec_x2:nat) : nat =
   case (rec_x1, rec_x2) of
     (x, Zero) => S (Zero)
   | (x, S (y)) => mult (x, exp (x, y))

and succ17 (rec_x1:nat) : nat =
   case (rec_x1) of
     (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (Zero))))))))))))))))) => Zero
   | (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (Zero)))))))))))))))) => S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (Zero))))))))))))))))
   | (S (S (S (S (S (S (S (S (S (S (S (S (S (S (Zero))))))))))))))) => S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (Zero)))))))))))))))
   | (S (S (S (S (S (S (S (S (S (S (S (S (S (Zero)))))))))))))) => S (S (S (S (S (S (S (S (S (S (S (S (S (S (Zero))))))))))))))
   | (S (S (S (S (S (S (S (S (S (S (S (S (Zero))))))))))))) => S (S (S (S (S (S (S (S (S (S (S (S (S (Zero)))))))))))))
   | (S (S (S (S (S (S (S (S (S (S (S (Zero)))))))))))) => S (S (S (S (S (S (S (S (S (S (S (S (Zero))))))))))))
   | (S (S (S (S (S (S (S (S (S (S (Zero))))))))))) => S (S (S (S (S (S (S (S (S (S (S (Zero)))))))))))
   | (S (S (S (S (S (S (S (S (S (Zero)))))))))) => S (S (S (S (S (S (S (S (S (S (Zero))))))))))
   | (S (S (S (S (S (S (S (S (Zero))))))))) => S (S (S (S (S (S (S (S (S (Zero)))))))))
   | (S (S (S (S (S (S (S (Zero)))))))) => S (S (S (S (S (S (S (S (Zero))))))))
   | (S (S (S (S (S (S (Zero))))))) => S (S (S (S (S (S (S (Zero)))))))
   | (S (S (S (S (S (Zero)))))) => S (S (S (S (S (S (Zero))))))
   | (S (S (S (S (Zero))))) => S (S (S (S (S (Zero)))))
   | (S (S (S (Zero)))) => S (S (S (S (Zero))))
   | (S (S (Zero))) => S (S (S (Zero)))
   | (S (Zero)) => S (S (Zero))
   | (Zero) => S (Zero)

and pred17 (rec_x1:nat) : nat =
   case (rec_x1) of
     (S (x)) => x
   | (Zero) => S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (Zero))))))))))))))))

and plus17 (rec_x1:nat, rec_x2:nat) : nat =
   case (rec_x1, rec_x2) of
     (x, Zero) => x
   | (x, S (y)) => succ17 (plus17 (x, y))

and mult17 (rec_x1:nat, rec_x2:nat) : nat =
   case (rec_x1, rec_x2) of
     (x, Zero) => Zero
   | (x, S (y)) => plus17 (x, mult17 (x, y))

and exp17 (rec_x1:nat, rec_x2:nat) : nat =
   case (rec_x1, rec_x2) of
     (x, Zero) => succ17 (Zero)
   | (x, S (y)) => mult17 (x, exp17 (x, y))

and eval (rec_x1:sNat) : nat =
   case (rec_x1) of
     (Exz) => Zero
   | (Exs (xs)) => S (eval (xs))
   | (Explus (xs, ys)) => plus (eval (xs), eval (ys))
   | (Exmult (xs, ys)) => mult (eval (xs), eval (ys))
   | (Exexp (xs, ys)) => exp (eval (xs), eval (ys))

and eval17 (rec_x1:sNat) : nat =
   case (rec_x1) of
     (Exz) => Zero
   | (Exone) => S (Zero)
   | (Exs (xs)) => succ17 (eval17 (xs))
   | (Explus (xs, ys)) => plus17 (eval17 (xs), eval17 (ys))
   | (Exmult (xs, ys)) => mult17 (eval17 (xs), eval17 (ys))
   | (Exexp (xs, ys)) => exp17 (eval17 (xs), eval (ys))

and evalsym17 (rec_x1:sNat) : nat =
   case (rec_x1) of
     (Exz) => Zero
   | (Exs (xs)) => succ17 (evalsym17 (xs))
   | (Explus (xs, ys)) => plus17 (evalsym17 (xs), evalsym17 (ys))
   | (Exmult (xs, Exz)) => Zero
   | (Exmult (xs, Exs (ys))) => evalsym17 (Explus (Exmult (xs, ys), xs))
   | (Exmult (xs, Explus (ys, zs))) => evalsym17 (Explus (Exmult (xs, ys), Exmult (xs, zs)))
   | (Exmult (xs, Exmult (ys, zs))) => evalsym17 (Exmult (Exmult (xs, ys), zs))
   | (Exmult (xs, Exexp (ys, zs))) => evalsym17 (Exmult (xs, dec (Exexp (ys, zs))))
   | (Exexp (xs, Exz)) => succ17 (Zero)
   | (Exexp (xs, Exs (ys))) => evalsym17 (Exmult (Exexp (xs, ys), xs))
   | (Exexp (xs, Explus (ys, zs))) => evalsym17 (Exmult (Exexp (xs, ys), Exexp (xs, zs)))
   | (Exexp (xs, Exmult (ys, zs))) => evalsym17 (Exexp (Exexp (xs, ys), zs))
   | (Exexp (xs, Exexp (ys, zs))) => evalsym17 (Exexp (xs, dec (Exexp (ys, zs))))

and evalexp17 (rec_x1:sNat) : nat =
   case (rec_x1) of
     (xs) => eval17 (expand (xs))

and getval (rec_x1:tree) : nat =
   case (rec_x1) of
     (Leaf (xval)) => xval
   | (Node (xval, max, left, right)) => xval

and getmax (rec_x1:tree) : nat =
   case (rec_x1) of
     (Leaf (xval)) => xval
   | (Node (xval, max, left, right)) => max

and calctree17 (rec_x1:nat) : nat =
   case (rec_x1) of
     (x) => mult17 (exp17 (S (S (Zero)), pred17 (x)), pred17 (exp17 (S (S (Zero)), x)))

and nat2sym (rec_x1:nat) : sNat =
   case (rec_x1) of
     (Zero) => Exz
   | (S (x)) => Exs (nat2sym (x))

and expand (rec_x1:sNat) : sNat =
   case (rec_x1) of
     (Exz) => Exz
   | (Exone) => Exone
   | (Exs (xs)) => Explus (Exone, expand (xs))
   | (Explus (xs, ys)) => Explus (expand (xs), expand (ys))
   | (Exmult (xs, Exz)) => Exz
   | (Exmult (xs, Exone)) => expand (xs)
   | (Exmult (xs, Explus (ys, zs))) => expand (Explus (Exmult (xs, ys), Exmult (xs, zs)))
   | (Exmult (xs, Exs (ys))) => expand (Exmult (xs, expand (Exs (ys))))
   | (Exmult (xs, Exmult (ys,zs))) => expand (Exmult (xs, expand (Exmult (ys,zs))))
   | (Exmult (xs, Exexp (ys,zs))) => expand (Exmult (xs, expand (Exexp (ys,zs))))
   | (Exexp (xs, Exz)) => Exone
   | (Exexp (xs, Exone)) => expand (xs)
   | (Exexp (xs, Explus (ys, zs))) => expand (Exmult (Exexp (xs, ys), Exexp (xs, zs)))
   | (Exexp (xs, Exs (ys))) => expand (Exexp (xs, expand (Exs (ys))))
   | (Exexp (xs, Exmult (ys,zs))) => expand (Exexp (xs, expand (Exmult (ys,zs))))
   | (Exexp (xs, Exexp (ys,zs))) => expand (Exexp (xs, expand (Exexp (ys,zs))))

and buildtree (rec_x1:nat, rec_x2:nat) : tree =
   case (rec_x1, rec_x2) of
     (Zero, xval) => Leaf (xval)
   | (S (x), y) => Node (plus17 (getval (buildtree (x, y)),getval (buildtree (x, succ17 (getmax (buildtree (x, y)))))), getmax (buildtree (x, succ17 (getmax (buildtree (x, y))))), buildtree (x, y),buildtree (x, succ17 (getmax (buildtree (x, y)))))

fun main () = (
   print_Boolean (benchevaltree17 (twentytwo()));
   print "\n";
   OS.Process.exit (OS.Process.success)
)

val _ = main ()

end
