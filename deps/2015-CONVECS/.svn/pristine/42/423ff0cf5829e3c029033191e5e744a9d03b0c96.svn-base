// TOM-A
import evalexpr.term.*;
import evalexpr.term.types.*;
public class Evalexpr {
  %gom{
    module Term
    abstract syntax
    ENat =
      | Exexp(rec_x1_1:ENat, rec_x2_1:ENat)
      | Exmult(rec_x1_2:ENat, rec_x2_2:ENat)
      | expand(rec_x1_3:ENat)
      | Explus(rec_x1_4:ENat, rec_x2_4:ENat)
      | Exs(rec_x1_5:ENat)
      | Exz()
      | seventeen()
      | two()
    Pos =
      | cDub(rec_x1_1:Xbool, rec_x2_1:Pos)
      | d1()
    SNat =
      | eval17(rec_x1_1:ENat)
      | evalexp17(rec_x1_2:ENat)
      | exp17(rec_x1_3:SNat, rec_x2_3:SNat)
      | mult17(rec_x1_4:SNat, rec_x2_4:SNat)
      | plus17(rec_x1_5:SNat, rec_x2_5:SNat)
      | S(rec_x1_6:SNat)
      | succ17(rec_x1_7:SNat)
      | Z()
    Xbool =
      | and(rec_x1_1:Xbool, rec_x2_1:Xbool)
      | eqBool(rec_x1_2:Xbool, rec_x2_2:Xbool)
      | eqENat(rec_x1_3:ENat, rec_x2_3:ENat)
      | eqPos(rec_x1_4:Pos, rec_x2_4:Pos)
      | eq(rec_x1_5:SNat, rec_x2_5:SNat)
      | f(rec_x1_6:ENat)
      | lambda0(rec_x1_7:ENat)
      | Xfalse()
      | Xtrue()
    module Term:rules() {
      eqBool (Xtrue(),b) -> b
      eqBool (Xfalse(),Xtrue()) -> Xfalse()
      eqBool (Xfalse(),Xfalse()) -> Xtrue()
      and (b,Xtrue()) -> b
      and (b,Xfalse()) -> Xfalse()
      eqPos (d1(),d1()) -> Xtrue()
      eqPos (d1(),cDub (b,p)) -> Xfalse()
      eqPos (cDub (b,p),d1()) -> Xfalse()
      eqPos (cDub (b,p),cDub (c,q)) -> and (eqBool (b,c), eqPos (p,q))
      lambda0 (m) -> eq (eval17 (m),evalexp17 (m))
      eq (Z(),Z()) -> Xtrue()
      eq (Z(),S (r)) -> Xfalse()
      eq (S (r),Z()) -> Xfalse()
      eq (S (r),S (t)) -> eq (r,t)
      eqENat (Exz(),Exz()) -> Xtrue()
      eqENat (Exz(),Exs (m)) -> Xfalse()
      eqENat (Exz(),Explus (m,n)) -> Xfalse()
      eqENat (Exz(),Exmult (m,n)) -> Xfalse()
      eqENat (Exz(),Exexp (m,n)) -> Xfalse()
      eqENat (Exs (m),Exz()) -> Xfalse()
      eqENat (Exs (n),Exs (m)) -> eqENat (n,m)
      eqENat (Exs (m),Explus (n,o)) -> Xfalse()
      eqENat (Exs (n),Exmult (m,o)) -> Xfalse()
      eqENat (Exs (m),Exexp (n,o)) -> Xfalse()
      eqENat (Explus (n,m),Exz()) -> Xfalse()
      eqENat (Explus (m,n),Exs (o)) -> Xfalse()
      eqENat (Explus (n,m),Explus (o,l)) -> and (eqENat (n,o),eqENat (m,l))
      eqENat (Explus (m,n),Exmult (o,l)) -> Xfalse()
      eqENat (Explus (n,m),Exexp (o,l)) -> Xfalse()
      eqENat (Exmult (m,n),Exz()) -> Xfalse()
      eqENat (Exmult (n,m),Exs (o)) -> Xfalse()
      eqENat (Exmult (m,n),Explus (o,l)) -> Xfalse()
      eqENat (Exmult (n,m),Exmult (o,l)) -> and (eqENat (n,o),eqENat (m,l))
      eqENat (Exmult (m,n),Exexp (o,l)) -> Xfalse()
      eqENat (Exexp (n,m),Exz()) -> Xfalse()
      eqENat (Exexp (m,n),Exs (o)) -> Xfalse()
      eqENat (Exexp (n,m),Explus (o,l)) -> Xfalse()
      eqENat (Exexp (m,n),Exmult (o,l)) -> Xfalse()
      eqENat (Exexp (m,n),Exexp (o,l)) -> and (eqENat (m,o),eqENat (n,l))
      succ17 (r) -> Z() if eq (r,S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (Z()))))))))))))))))) == Xtrue()
      succ17 (r) -> S (r) if eq (r,S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (Z()))))))))))))))))) == Xfalse()
      plus17 (r,Z()) -> r
      plus17 (r,S (t)) -> succ17 (plus17 (r,t))
      mult17 (r,Z()) -> Z()
      mult17 (r,S (t)) -> plus17 (r,mult17 (r,t))
      exp17 (r,Z()) -> succ17 (Z())
      exp17 (r,S (t)) -> mult17 (r,exp17 (r,t))
      eval17 (Exz()) -> Z()
      eval17 (Exs (n)) -> succ17 (eval17 (n))
      eval17 (Explus (n,m)) -> plus17 (eval17 (n),eval17 (m))
      eval17 (Exmult (n,m)) -> mult17 (eval17 (n),eval17 (m))
      eval17 (Exexp (n,m)) -> exp17 (eval17 (n),eval17 (m))
      evalexp17 (n) -> eval17 (expand (n))
      expand (Exz()) -> Exz()
      expand (Exs (n)) -> Explus (Exs (Exz()),n)
      expand (Explus (n,m)) -> Explus (expand (n),expand (m))
      expand (Exmult (n,Exz())) -> Exz()
      expand (Exmult (n,Exs (Exz()))) -> expand (n)
      expand (Exmult (n,Explus (m,o))) -> expand (Explus (Exmult (n,m),Exmult (n,o)))
      expand (Exmult (n,Exmult (m,o))) -> expand (Exmult (n,expand (Exmult (m,o))))
      expand (Exmult (n,Exexp (m,o))) -> expand (Exmult (n,expand (Exexp (m,o))))
      expand (Exexp (n,Exz())) -> Exs (Exz())
      expand (Exexp (n,Exs (m))) -> expand (n) if eqENat (m,Exz()) == Xtrue()
      expand (Exexp (n,Exs (m))) -> expand (Exexp (n,expand (Exs (m)))) if eqENat (m,Exz()) == Xfalse()
      expand (Exexp (n,Explus (m,o))) -> expand (Exmult (Exexp (n,m),Exexp (n,o)))
      expand (Exexp (n,Exmult (m,o))) -> expand (Exexp (n,expand (Exmult (m,o))))
      expand (Exexp (n,Exexp (m,o))) -> expand (Exexp (n,expand (Exexp (m,o))))
      two() -> Exs (Exs (Exz()))
      seventeen() -> Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exs (Exz())))))))))))))))))))
      f (m) -> lambda0 (Exexp (two(),m))
    }
  }
  public static void main (String[] args) {
    System.out.println (`f (seventeen()));
  }
}
