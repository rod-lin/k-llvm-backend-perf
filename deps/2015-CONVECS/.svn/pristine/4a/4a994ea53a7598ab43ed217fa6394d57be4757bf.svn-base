specification REVNAT100 [PRINT] : noexit
library BOOLEAN endlib
type LOTOS_TYPE is BOOLEAN
sorts
  Nat, List
opns
  _==_, _/=_ : Nat, Nat -> BOOL
  _==_, _/=_ : List, List -> BOOL
  l (*! constructor *) : Nat, List -> List 
  nil (*! constructor *) : -> List 
  d0 (*! constructor *) : -> Nat 
  s (*! constructor *) : Nat -> Nat 
  d10 : -> Nat 
  plus : Nat, Nat -> Nat 
  times : Nat, Nat -> Nat 
  gen : Nat -> List 
  conc : List, List -> List 
  rev : List -> List 
eqns
forall
  E, N, M : Nat ,
  L1, L2 : List ,
  REC_Nat_X, REC_Nat_Y : Nat,
  REC_List_X, REC_List_Y : List
ofsort BOOL
  REC_Nat_X == REC_Nat_X = TRUE;
  (* otherwise *) REC_Nat_X == REC_Nat_Y = FALSE;
ofsort BOOL
  REC_Nat_X /= REC_Nat_X = FALSE;
  (* otherwise *) REC_Nat_X /= REC_Nat_Y = TRUE;
ofsort BOOL
  REC_List_X == REC_List_X = TRUE;
  (* otherwise *) REC_List_X == REC_List_Y = FALSE;
ofsort BOOL
  REC_List_X /= REC_List_X = FALSE;
  (* otherwise *) REC_List_X /= REC_List_Y = TRUE;
ofsort Nat
  d10 = s (s (s (s (s (s (s (s (s (s (d0))))))))));
  plus (d0, N) = N;
  plus (s (N), M) = s (plus (N, M));
  times (d0, N) = d0;
  times (s (N), M) = plus (M, times (N, M));
ofsort List
  gen (s (N)) = l (s (N), gen (N));
  gen (d0) = l (d0, nil);
  conc (l (E, L1), L2) = l (E, conc (L1, L2));
  conc (nil, L2) = L2;
  rev (l (E, L1)) = conc (rev (L1), l (E, nil));
  rev (nil) = nil;
endtype
behaviour
  PRINT !rev (gen (times (d10, d10)));
  stop
endspec
