IMPLEMENTATION tricky

DATA nSingleton == 
     Ncons

DATA uSingleton == 
     Ucons (rec_x1 : xnat)

DATA xnat == 
     D0
     Succ (rec_x1 : xnat)

FUN =  : nSingleton ** nSingleton -> bool
FUN |= : nSingleton ** nSingleton -> bool
FUN print : nSingleton -> com[void]

DEF _ = :nSingleton**nSingleton->bool _ == false

DEF rec_x |= :nSingleton**nSingleton->bool rec_y == not (rec_x = rec_y)

DEF Ncons = :nSingleton**nSingleton->bool Ncons == true

DEF print (Ncons) == write (stdOut, "Ncons")

FUN =  : uSingleton ** uSingleton -> bool
FUN |= : uSingleton ** uSingleton -> bool
FUN print : uSingleton -> com[void]

DEF _ = :uSingleton**uSingleton->bool _ == false

DEF rec_x |= :uSingleton**uSingleton->bool rec_y == not (rec_x = rec_y)

DEF Ucons (rec_x1) = :uSingleton**uSingleton->bool Ucons (rec_y1) == (rec_x1 = rec_y1)

DEF print (Ucons (rec_x1)) ==
    (write (stdOut, "Ucons");
    write (stdOut, " (");
    print (rec_x1);
    write (stdOut, ")"))

FUN =  : xnat ** xnat -> bool
FUN |= : xnat ** xnat -> bool
FUN print : xnat -> com[void]

DEF _ = :xnat**xnat->bool _ == false

DEF rec_x |= :xnat**xnat->bool rec_y == not (rec_x = rec_y)

DEF D0 = :xnat**xnat->bool D0 == true

DEF print (D0) == write (stdOut, "D0")

DEF Succ (rec_x1) = :xnat**xnat->bool Succ (rec_y1) == (rec_x1 = rec_y1)

DEF print (Succ (rec_x1)) ==
    (write (stdOut, "Succ");
    write (stdOut, " (");
    print (rec_x1);
    write (stdOut, ")"))

FUN d1 : xnat
FUN d2 : xnat
FUN d3 : xnat
FUN f : xnat -> xnat 

DEF d1 == Succ (D0)

DEF d2 ==
    IF (D0 = D0) THEN D0
    FI

DEF d3 ==
    IF (D0 |= D0) THEN D0
    IF (Succ (D0) = D0) THEN D0
    IF (Succ (D0) |= D0) THEN Succ (D0)
    FI

DEF f (n) ==
    IF (n |= D0 and n |= Succ (D0)) THEN n
    FI

DEF main ==
    print (Ncons);
    write (stdOut, newline);
    print (Ucons (D0));
    write (stdOut, newline);
    print (d1);
    write (stdOut, newline);
    print (d2);
    write (stdOut, newline);
    print (d3);
    write (stdOut, newline);
    exit (0)
