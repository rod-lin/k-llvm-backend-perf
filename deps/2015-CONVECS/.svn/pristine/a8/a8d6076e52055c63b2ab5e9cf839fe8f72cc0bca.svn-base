local

datatype xbool = Xtrue | Xfalse

and strg = A | B | C of strg * strg

and list = Nil | L of strg * list ;

in

datatype xbool = Xtrue | Xfalse

and strg = A | B | C of strg * strg

and list = Nil | L of strg * list ;

fun print_Xbool (rec_x:xbool) =
   case rec_x of
   Xtrue => (
      print "Xtrue"
   ) | Xfalse => (
      print "Xfalse"
   )

and print_Strg (rec_x:strg) =
   case rec_x of
   A => (
      print "A"
   ) | B => (
      print "B"
   ) | C (rec_x1, rec_x2) => (
      print "C";
      print " (";
      print_Strg rec_x1;
       print ",";
      print_Strg rec_x2;
      print ")"
   )

and print_List (rec_x:list) =
   case rec_x of
   Nil => (
      print "Nil"
   ) | L (rec_x1, rec_x2) => (
      print "L";
      print " (";
      print_Strg rec_x1;
       print ",";
      print_List rec_x2;
      print ")"
   )

fun gte (rec_x1:strg, rec_x2:strg) : xbool =
   case (rec_x1, rec_x2) of
     (B, A) => Xtrue
   | (A, B) => Xfalse
   | (A, A) => Xtrue
   | (B, B) => Xtrue
   | (C (e, s), e2) => gte (e, e2)
   | (e, C (e2, s2)) where e = e2 => Xfalse
   | (e, C (e2, s2)) where e <> e2 => gte (e, e2)

and merge (rec_x1:list, rec_x2:list) : list =
   case (rec_x1, rec_x2) of
     (Nil, l1) => l1
   | (l1, Nil) => l1
   | (L (s, l1), L (s2, l2)) where gte (s, s2) = Xtrue => L (s2, merge (L (s, l1), l2))
   | (L (s, l1), L (s2, l2)) where gte (s, s2) = Xfalse => L (s, merge (l1, L (s2, l2)))

and odd (rec_x1:list) : list =
   case (rec_x1) of
     (Nil) => Nil
   | (L (s, Nil)) => L (s, Nil)
   | (L (s, L (s2, l1))) => L (s, odd (l1))

and even (rec_x1:list) : list =
   case (rec_x1) of
     (Nil) => Nil
   | (L (s, Nil)) => Nil
   | (L (s, L (s2, l1))) => L (s2, even (l1))

and sort (rec_x1:list) : list =
   case (rec_x1) of
     (Nil) => Nil
   | (L (s, Nil)) => L (s, Nil)
   | (L (s, L (s2, l1))) => merge (sort (odd (L (s, L (s2, l1)))), sort (even (L (s, L (s2, l1)))))

fun main () = (
   print_List (sort (L (C (A, C (B, C (A, B))), L (C (B, C (A, C (B, B))), L (C (A, C (B, C (A, A))), L (C (B, C (B, C (B, B))), L (C (B, C (B, C (B, A))),L (C (A, C (A, C (A, B))), L (C (B, C (B, C (A, A))), L (C (A, C (A, C (A, A))), L (C (A, C (A, C (B, B))), L (C (B, C (A, C (B, A))),L (C (A, C (B, C (A, B))), L (C (B, C (A, C (B, B))), L (C (A, C (B, C (A, A))), L (C (B, C (B, C (B, B))), L (C (B, C (B, C (B, A))),L (C (A, C (A, C (A, B))), L (C (B, C (B, C (A, A))), L (C (A, C (A, C (A, A))), L (C (A, C (A, C (B, B))), L (C (B, C (A, C (B, A))),L (C (A, C (B, C (A, B))), L (C (B, C (A, C (B, B))), L (C (A, C (B, C (A, A))), L (C (B, C (B, C (B, B))), L (C (B, C (B, C (B, A))),L (C (A, C (A, C (A, B))), L (C (B, C (B, C (A, A))), L (C (A, C (A, C (A, A))), L (C (A, C (A, C (B, B))), L (C (B, C (A, C (B, A))),L (C (A, C (B, C (A, B))), L (C (B, C (A, C (B, B))), L (C (A, C (B, C (A, A))), L (C (B, C (B, C (B, B))), L (C (B, C (B, C (B, A))),L (C (A, C (A, C (A, B))), L (C (B, C (B, C (A, A))), L (C (A, C (A, C (A, A))), L (C (A, C (A, C (B, B))), L (C (B, C (A, C (B, A))), L (C (A, C (B, C (A, B))), L (C (B, C (A, C (B, B))), L (C (A, C (B, C (A, A))), L (C (B, C (B, C (B, B))), L (C (B, C (B, C (B, A))), L (C (A, C (A, C (A, B))), L (C (B, C (B, C (A, A))), L (C (A, C (A, C (A, A))), L (C (A, C (A, C (B, B))), L (C (B, C (A, C (B, A))),Nil))))))))))))))))))))))))))))))))))))))))))))))))))));
   print "\n";
   OS.Process.exit (OS.Process.success)
)

val _ = main ()

end
