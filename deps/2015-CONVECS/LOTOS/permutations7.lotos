specification PERMUTATIONS7 [PRINT] : noexit
library BOOLEAN endlib
type LOTOS_TYPE is BOOLEAN
sorts
  Nat, NatList, NatListList
opns
  _==_, _/=_ : Nat, Nat -> BOOL
  _==_, _/=_ : NatList, NatList -> BOOL
  _==_, _/=_ : NatListList, NatListList -> BOOL
  d0 (*! constructor *) : -> Nat 
  s (*! constructor *) : Nat -> Nat 
  nil (*! constructor *) : -> NatList 
  l (*! constructor *) : Nat -> NatList 
  ll (*! constructor *) : NatList, NatList -> NatList 
  nilP (*! constructor *) : -> NatListList 
  p (*! constructor *) : NatList -> NatListList 
  pp (*! constructor *) : NatListList, NatListList -> NatListList 
  perm : Nat -> NatListList 
  insert1 : Nat, NatListList -> NatListList 
  insert0 : Nat, NatList -> NatListList 
  map_cons : Nat, NatListList -> NatListList 
  ppreduce : NatListList, NatListList -> NatListList 
  ppflat : NatListList, NatListList -> NatListList 
eqns
forall
  P1, P2 : NatList ,
  Ps, Ps1, Ps2, accumulator : NatListList ,
  N, M : Nat ,
  REC_Nat_X, REC_Nat_Y : Nat,
  REC_NatList_X, REC_NatList_Y : NatList,
  REC_NatListList_X, REC_NatListList_Y : NatListList
ofsort BOOL
  REC_Nat_X == REC_Nat_X = TRUE;
  (* otherwise *) REC_Nat_X == REC_Nat_Y = FALSE;
ofsort BOOL
  REC_Nat_X /= REC_Nat_X = FALSE;
  (* otherwise *) REC_Nat_X /= REC_Nat_Y = TRUE;
ofsort BOOL
  REC_NatList_X == REC_NatList_X = TRUE;
  (* otherwise *) REC_NatList_X == REC_NatList_Y = FALSE;
ofsort BOOL
  REC_NatList_X /= REC_NatList_X = FALSE;
  (* otherwise *) REC_NatList_X /= REC_NatList_Y = TRUE;
ofsort BOOL
  REC_NatListList_X == REC_NatListList_X = TRUE;
  (* otherwise *) REC_NatListList_X == REC_NatListList_Y = FALSE;
ofsort BOOL
  REC_NatListList_X /= REC_NatListList_X = FALSE;
  (* otherwise *) REC_NatListList_X /= REC_NatListList_Y = TRUE;
ofsort NatListList
  perm (d0) = ppreduce (p (nil), nilP);
  perm (s (d0)) = ppreduce (p (ll (l (s (d0)), nil)), nilP);
  perm (s (N)) = insert1 (s (N), perm (N));
  insert1 (N, pp (p (P1), Ps)) = ppreduce (insert0 (N, P1), insert1 (N, Ps));
  insert1 (N, p (P1)) = insert0 (N,P1);
  insert1 (N, nilP) = nilP;
  insert0 (N, ll (l (M), P2)) = ppreduce (p (ll (l (N), ll (l (M), P2))), map_cons (M, insert0 (N, P2)));
  insert0 (N, nil) = ppreduce (p (ll (l (N), nil)), nilP);
  map_cons (M, pp (p (P1), Ps)) = ppreduce (p (ll (l (M), P1)), map_cons (M, Ps));
  map_cons (M, p (P1)) = p (ll (l (M), P1));
  map_cons (M, nilP) = nilP;
  ppreduce (nilP, Ps2) = Ps2;
  ppreduce (Ps1, nilP) = Ps1;
  ppreduce (Ps1, Ps2) = ppflat (Ps1, ppflat (Ps2, nilP));
  ppflat (nilP, accumulator) = accumulator;
  ppflat (p (P1), accumulator) = pp (p (P1), accumulator);
  ppflat (pp (Ps1, Ps2), accumulator) = ppflat (Ps1, ppflat (Ps2, accumulator));
endtype
behaviour
  PRINT !perm (s (s (s (s (s (s (s (d0))))))));
  stop
endspec
