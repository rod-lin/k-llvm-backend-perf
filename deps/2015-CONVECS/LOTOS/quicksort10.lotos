specification QUICKSORT10 [PRINT] : noexit
library BOOLEAN endlib
type LOTOS_TYPE is BOOLEAN
sorts
  Xbool, Nat, NatList, NatListPair
opns
  _==_, _/=_ : Xbool, Xbool -> BOOL
  _==_, _/=_ : Nat, Nat -> BOOL
  _==_, _/=_ : NatList, NatList -> BOOL
  _==_, _/=_ : NatListPair, NatListPair -> BOOL
  Xtrue (*! constructor *) : -> Xbool 
  Xfalse (*! constructor *) : -> Xbool 
  d0 (*! constructor *) : -> Nat 
  s (*! constructor *) : Nat -> Nat 
  nil (*! constructor *) : -> NatList 
  cons (*! constructor *) : Nat, NatList -> NatList 
  pair (*! constructor *) : NatList, NatList -> NatListPair 
  Xnot : Xbool -> Xbool 
  d10 : -> Nat 
  st : Nat, Nat -> Xbool 
  get : Nat, Nat -> Xbool 
  plus : Nat, Nat -> Nat 
  times : Nat, Nat -> Nat 
  rev : Nat -> NatList 
  split : Nat, NatList -> NatListPair 
  qsort : NatList -> NatList 
  append : NatList, NatList -> NatList 
  p1 : NatListPair -> NatList 
  p2 : NatListPair -> NatList 
eqns
forall
  N, M : Nat ,
  L, L1, L2, LT, GT : NatList ,
  REC_Xbool_X, REC_Xbool_Y : Xbool,
  REC_Nat_X, REC_Nat_Y : Nat,
  REC_NatList_X, REC_NatList_Y : NatList,
  REC_NatListPair_X, REC_NatListPair_Y : NatListPair
ofsort BOOL
  REC_Xbool_X == REC_Xbool_X = TRUE;
  (* otherwise *) REC_Xbool_X == REC_Xbool_Y = FALSE;
ofsort BOOL
  REC_Xbool_X /= REC_Xbool_X = FALSE;
  (* otherwise *) REC_Xbool_X /= REC_Xbool_Y = TRUE;
ofsort BOOL
  REC_Nat_X == REC_Nat_X = TRUE;
  (* otherwise *) REC_Nat_X == REC_Nat_Y = FALSE;
ofsort BOOL
  REC_Nat_X /= REC_Nat_X = FALSE;
  (* otherwise *) REC_Nat_X /= REC_Nat_Y = TRUE;
ofsort BOOL
  REC_NatList_X == REC_NatList_X = TRUE;
  (* otherwise *) REC_NatList_X == REC_NatList_Y = FALSE;
ofsort BOOL
  REC_NatList_X /= REC_NatList_X = FALSE;
  (* otherwise *) REC_NatList_X /= REC_NatList_Y = TRUE;
ofsort BOOL
  REC_NatListPair_X == REC_NatListPair_X = TRUE;
  (* otherwise *) REC_NatListPair_X == REC_NatListPair_Y = FALSE;
ofsort BOOL
  REC_NatListPair_X /= REC_NatListPair_X = FALSE;
  (* otherwise *) REC_NatListPair_X /= REC_NatListPair_Y = TRUE;
ofsort Nat
  d10 = s (s (s (s (s (s (s (s (s (s (d0))))))))));
ofsort Xbool
  Xnot (Xtrue) = Xfalse;
  Xnot (Xfalse) = Xtrue;
  st (d0, s (N)) = Xtrue;
  st (s (N), d0) = Xfalse;
  st (d0, d0) = Xfalse;
  st (s (N), s (M)) = st (N, M);
  get (N, M) = Xnot (st (N, M));
ofsort Nat
  plus (d0, N) = N;
  plus (s (N), M) = s (plus (N, M));
  times (d0, N) = d0;
  times (s (N), M) = plus (M, times (N, M));
ofsort NatList
  rev (s (N)) = cons (s (N), rev (N));
  rev (d0) = cons (d0, nil);
ofsort NatListPair
  st (N, M) == Xtrue => split (N, cons (M, L)) = pair (p1 (split (N, L)), cons (M, p2 (split (N, L))));
  get (N, M) == Xtrue => split (N, cons (M, L)) = pair (cons (M, p1 (split (N, L))), p2 (split (N, L)));
  split (N, nil) = pair (nil, nil);
ofsort NatList
  append (cons (N, L), LT) = cons (N, append (L, LT));
  append (nil, L) = L;
  qsort (nil) = nil;
  qsort (cons (N, L)) = append (qsort (p1 (split (N, L))), cons (N, qsort (p2 (split (N, L)))));
  p1 (pair (L1, L2)) = L1;
  p2 (pair (L1, L2)) = L2;
endtype
behaviour
  PRINT !qsort (rev (d10));
  stop
endspec
