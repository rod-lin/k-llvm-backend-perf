specification MERGE [PRINT] : noexit
library BOOLEAN endlib
type LOTOS_TYPE is BOOLEAN
sorts
  Xbool, Strg, List
opns
  _==_, _/=_ : Xbool, Xbool -> BOOL
  _==_, _/=_ : Strg, Strg -> BOOL
  _==_, _/=_ : List, List -> BOOL
  Xtrue (*! constructor *) : -> Xbool 
  Xfalse (*! constructor *) : -> Xbool 
  a (*! constructor *) : -> Strg 
  b (*! constructor *) : -> Strg 
  c (*! constructor *) : Strg, Strg -> Strg 
  nil (*! constructor *) : -> List 
  l (*! constructor *) : Strg, List -> List 
  gte : Strg, Strg -> Xbool 
  merge : List, List -> List 
  sort : List -> List 
  odd : List -> List 
  even : List -> List 
eqns
forall
  E, E2, S, S2 : Strg ,
  L1, L2 : List ,
  REC_Xbool_X, REC_Xbool_Y : Xbool,
  REC_Strg_X, REC_Strg_Y : Strg,
  REC_List_X, REC_List_Y : List
ofsort BOOL
  REC_Xbool_X == REC_Xbool_X = TRUE;
  (* otherwise *) REC_Xbool_X == REC_Xbool_Y = FALSE;
ofsort BOOL
  REC_Xbool_X /= REC_Xbool_X = FALSE;
  (* otherwise *) REC_Xbool_X /= REC_Xbool_Y = TRUE;
ofsort BOOL
  REC_Strg_X == REC_Strg_X = TRUE;
  (* otherwise *) REC_Strg_X == REC_Strg_Y = FALSE;
ofsort BOOL
  REC_Strg_X /= REC_Strg_X = FALSE;
  (* otherwise *) REC_Strg_X /= REC_Strg_Y = TRUE;
ofsort BOOL
  REC_List_X == REC_List_X = TRUE;
  (* otherwise *) REC_List_X == REC_List_Y = FALSE;
ofsort BOOL
  REC_List_X /= REC_List_X = FALSE;
  (* otherwise *) REC_List_X /= REC_List_Y = TRUE;
ofsort Xbool
  gte (b, a) = Xtrue;
  gte (a, b) = Xfalse;
  gte (a, a) = Xtrue;
  gte (b, b) = Xtrue;
  gte (c (E, S), E2) = gte (E, E2);
  E == E2 => gte (E, c (E2, S2)) = Xfalse;
  E /= E2 => gte (E, c (E2, S2)) = gte (E, E2);
ofsort List
  merge (nil, L1) = L1;
  merge (L1, nil) = L1;
  gte (S, S2) == Xtrue => merge (l (S, L1), l (S2, L2)) = l (S2, merge (l (S, L1), L2));
  gte (S, S2) == Xfalse => merge (l (S, L1), l (S2, L2)) = l (S, merge (L1, l (S2, L2)));
  odd (nil) = nil;
  odd (l (S, nil)) = l (S, nil);
  odd (l (S, l (S2, L1))) = l (S, odd (L1));
  even (nil) = nil;
  even (l (S, nil)) = nil;
  even (l (S, l (S2, L1))) = l (S2, even (L1));
  sort (nil) = nil;
  sort (l (S, nil)) = l (S, nil);
  sort (l (S, l (S2, L1))) = merge (sort (odd (l (S, l (S2, L1)))), sort (even (l (S, l (S2, L1)))));
endtype
behaviour
  PRINT !sort (l (c (a, c (b, c (a, b))), l (c (b, c (a, c (b, b))), l (c (a, c (b, c (a, a))), l (c (b, c (b, c (b, b))), l (c (b, c (b, c (b, a))),l (c (a, c (a, c (a, b))), l (c (b, c (b, c (a, a))), l (c (a, c (a, c (a, a))), l (c (a, c (a, c (b, b))), l (c (b, c (a, c (b, a))),l (c (a, c (b, c (a, b))), l (c (b, c (a, c (b, b))), l (c (a, c (b, c (a, a))), l (c (b, c (b, c (b, b))), l (c (b, c (b, c (b, a))),l (c (a, c (a, c (a, b))), l (c (b, c (b, c (a, a))), l (c (a, c (a, c (a, a))), l (c (a, c (a, c (b, b))), l (c (b, c (a, c (b, a))),l (c (a, c (b, c (a, b))), l (c (b, c (a, c (b, b))), l (c (a, c (b, c (a, a))), l (c (b, c (b, c (b, b))), l (c (b, c (b, c (b, a))),l (c (a, c (a, c (a, b))), l (c (b, c (b, c (a, a))), l (c (a, c (a, c (a, a))), l (c (a, c (a, c (b, b))), l (c (b, c (a, c (b, a))),l (c (a, c (b, c (a, b))), l (c (b, c (a, c (b, b))), l (c (a, c (b, c (a, a))), l (c (b, c (b, c (b, b))), l (c (b, c (b, c (b, a))),l (c (a, c (a, c (a, b))), l (c (b, c (b, c (a, a))), l (c (a, c (a, c (a, a))), l (c (a, c (a, c (b, b))), l (c (b, c (a, c (b, a))), l (c (a, c (b, c (a, b))), l (c (b, c (a, c (b, b))), l (c (a, c (b, c (a, a))), l (c (b, c (b, c (b, b))), l (c (b, c (b, c (b, a))), l (c (a, c (a, c (a, b))), l (c (b, c (b, c (a, a))), l (c (a, c (a, c (a, a))), l (c (a, c (a, c (b, b))), l (c (b, c (a, c (b, a))),nil)))))))))))))))))))))))))))))))))))))))))))))))))));
  stop
endspec
