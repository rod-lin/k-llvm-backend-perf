specification FIB32 [PRINT] : noexit
library BOOLEAN endlib
type LOTOS_TYPE is BOOLEAN
sorts
  Xbool, Pos, Int, Nat
opns
  _==_, _/=_ : Xbool, Xbool -> BOOL
  _==_, _/=_ : Pos, Pos -> BOOL
  _==_, _/=_ : Int, Int -> BOOL
  _==_, _/=_ : Nat, Nat -> BOOL
  T (*! constructor *) : -> Xbool 
  F (*! constructor *) : -> Xbool 
  d1 (*! constructor *) : -> Pos 
  cDub (*! constructor *) : Xbool, Pos -> Pos 
  cInt (*! constructor *) : Nat -> Int 
  cNeg (*! constructor *) : Pos -> Int 
  d0 (*! constructor *) : -> Nat 
  cNat (*! constructor *) : Pos -> Nat 
  Xnot : Xbool -> Xbool 
  eqPos : Pos, Pos -> Xbool 
  lePos : Pos, Pos -> Xbool 
  ltPos : Pos, Pos -> Xbool 
  s : Pos -> Pos 
  addc : Xbool, Pos, Pos -> Pos 
  Int2Nat : Int -> Nat 
  minus : Nat -> Int 
  minus2 : Nat, Nat -> Int 
  eq : Nat, Nat -> Xbool 
  Pos2Nat : Pos -> Nat 
  Nat2Pos : Nat -> Pos 
  le : Nat, Nat -> Xbool 
  lt : Nat, Nat -> Xbool 
  ge : Nat, Nat -> Xbool 
  gt : Nat, Nat -> Xbool 
  pre : Pos -> Nat 
  dub : Xbool, Nat -> Nat 
  plus : Nat, Nat -> Nat 
  gtesubtPos : Pos, Pos -> Nat 
  gtesubt : Nat, Nat -> Nat 
  gtesubtb : Xbool, Pos, Pos -> Nat 
  fib : Nat -> Nat 
  eqBool : Xbool, Xbool -> Xbool 
  and : Xbool, Xbool -> Xbool 
eqns
forall
  m, n : Nat ,
  b, c, d : Xbool ,
  x, y : Int ,
  p, q : Pos ,
  REC_Xbool_X, REC_Xbool_Y : Xbool,
  REC_Pos_X, REC_Pos_Y : Pos,
  REC_Int_X, REC_Int_Y : Int,
  REC_Nat_X, REC_Nat_Y : Nat
ofsort BOOL
  REC_Xbool_X == REC_Xbool_X = TRUE;
  (* otherwise *) REC_Xbool_X == REC_Xbool_Y = FALSE;
ofsort BOOL
  REC_Xbool_X /= REC_Xbool_X = FALSE;
  (* otherwise *) REC_Xbool_X /= REC_Xbool_Y = TRUE;
ofsort BOOL
  REC_Pos_X == REC_Pos_X = TRUE;
  (* otherwise *) REC_Pos_X == REC_Pos_Y = FALSE;
ofsort BOOL
  REC_Pos_X /= REC_Pos_X = FALSE;
  (* otherwise *) REC_Pos_X /= REC_Pos_Y = TRUE;
ofsort BOOL
  REC_Int_X == REC_Int_X = TRUE;
  (* otherwise *) REC_Int_X == REC_Int_Y = FALSE;
ofsort BOOL
  REC_Int_X /= REC_Int_X = FALSE;
  (* otherwise *) REC_Int_X /= REC_Int_Y = TRUE;
ofsort BOOL
  REC_Nat_X == REC_Nat_X = TRUE;
  (* otherwise *) REC_Nat_X == REC_Nat_Y = FALSE;
ofsort BOOL
  REC_Nat_X /= REC_Nat_X = FALSE;
  (* otherwise *) REC_Nat_X /= REC_Nat_Y = TRUE;
ofsort Xbool
  eqBool (T,b) = b;
  eqBool (F,T) = F;
  eqBool (F,F) = T;
  and (T,b) = b;
  and (F,b) = F;
  Xnot (T) = F;
  Xnot (F) = T;
  eqPos (d1,d1) = T;
  eqPos (d1,cDub (b,p)) = F;
  eqPos (cDub (b,p),d1) = F;
  eqPos (cDub (b,p),cDub (c,q)) = and (eqBool (b,c),eqPos (p,q));
  lePos (d1,p) = T;
  lePos (cDub (b,p),d1) = F;
  b == c => lePos (cDub (b,p),cDub (c,q)) = lePos (p,q);
  b /= c ,  b == F => lePos (cDub (b,p),cDub (c,q)) = lePos (p,q);
  b /= c ,  b == T => lePos (cDub (b,p),cDub (c,q)) = ltPos (p,q);
  ltPos (p,d1) = F;
  ltPos (d1,cDub (b,p)) = T;
  b == c => ltPos (cDub (b,p),cDub (c,q)) = ltPos (p,q);
  b /= c ,  b == F => ltPos (cDub (b,p),cDub (c,q)) = lePos (p,q);
  b /= c ,  b == T => ltPos (cDub (b,p),cDub (c,q)) = ltPos (p,q);
ofsort Pos
  s (d1) = cDub (F,d1);
  s (cDub (F,p)) = cDub (T,p);
  s (cDub (T,p)) = cDub (F,s (p));
  addc (F,d1,p) = s (p);
  addc (T,d1,p) = s (s (p));
  addc (F,p,d1) = s (p);
  addc (T,p,d1) = s (s (p));
  c == d => addc (b,cDub (c,p),cDub (d,q)) = cDub (b,addc (c,p,q));
  c /= d => addc (b,cDub (c,p),cDub (d,q)) = cDub (Xnot (b),addc (c,p,q));
ofsort Nat
  Int2Nat (cInt (n)) = n;
ofsort Int
  minus (d0) = cInt (d0);
  minus (cNat (p)) = cNeg (p);
  ge (m,n) == T => minus2 (m,n) = cInt (gtesubt (m,n));
  ge (m,n) == F => minus2 (m,n) = minus (gtesubt (n,m));
ofsort Nat
  Pos2Nat (p) = cNat (p);
ofsort Pos
  Nat2Pos (cNat (p)) = p;
ofsort Xbool
  eq (d0,d0) = T;
  eq (d0,cNat (p)) = F;
  eq (cNat (p),d0) = F;
  eq (cNat (p),cNat (q)) = eqPos (p,q);
  le (d0,n) = T;
  le (cNat (p),d0) = F;
  le (cNat (p),cNat (q)) = lePos (p,q);
  lt (n,d0) = F;
  lt (d0,cNat (p)) = T;
  lt (cNat (p),cNat (q)) = ltPos (p,q);
  ge (m,n) = le (n,m);
  gt (m,n) = lt (n,m);
ofsort Nat
  pre (d1) = d0;
  pre (cDub (T,p)) = cNat (cDub (F,p));
  pre (cDub (F,p)) = dub (T,pre (p));
  dub (F,d0) = d0;
  dub (T,d0) = cNat (d1);
  dub (b,cNat (p)) = cNat (cDub (b,p));
  plus (d0,n) = n;
  plus (n,d0) = n;
  plus (cNat (p),cNat (q)) = cNat (addc (F,p,q));
  gtesubtPos (p,q) = gtesubtb (F,p,q);
  gtesubt (n,d0) = n;
  gtesubt (cNat (p),cNat (q)) = gtesubtPos (p,q);
  gtesubtb (F,p,d1) = pre (p);
  gtesubtb (T,p,d1) = pre (Nat2Pos (pre (p)));
  c == d => gtesubtb (b,cDub (c,p),cDub (d,q)) = dub (b,gtesubtb (b,p,q));
  c /= d ,  c == F => gtesubtb (b,cDub (c,p),cDub (d,q)) = dub (Xnot (b),gtesubtb (T,p,q));
  c /= d ,  c == T => gtesubtb (b,cDub (c,p),cDub (d,q)) = dub (Xnot (b),gtesubtb (d,p,q));
  fib (d0) = d0;
  fib (cNat (d1)) = cNat (d1);
  fib (cNat (cDub (b,p))) = plus (fib (Int2Nat (minus2 (cNat (cDub (b,p)),Pos2Nat (d1)))),fib (Int2Nat (minus2 (cNat (cDub (b,p)),Pos2Nat (cDub (F,d1))))));
endtype
behaviour
  PRINT !fib (Pos2Nat (cDub (F,cDub (F,cDub (F,cDub (F,cDub (F,d1)))))));
  stop
endspec
