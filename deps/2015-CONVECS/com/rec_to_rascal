#! /bin/sh

# Imad Larrada -- quick-and-dirty REC translator to Rascal
# this script translates FILE.rec into FILE.rsc

DIR=`dirname "$0"`
COMMAND=`basename "$0"`

if [ $# -ne 1 ]
then
	echo "$COMMAND: one argument expected"
	exit 1
fi

if [ -f "$1" ]
then
	INPUT="$1"
elif [ -f "$1.rec" ]
then
	INPUT="$1.rec"
else
	echo "$COMMAND: cannot read $1"
	exit 1
fi

OUTPUT=`basename $INPUT .rec`.rsc

# ----------------------------------------------------------------------------

NORMED=`mktemp -t "rec_XXXXXXXXXX"`

ARGS_FILE=`mktemp -t "rec_XXXXXXXXXX"`

SCRIPT=`mktemp -t "rec_XXXXXXXXXX"`

TYPE_FILE=`mktemp -t "rec_XXXXXXXXXX"`

# ----------------------------------------------------------------------------

# etape 0 : normalisation

sh $DIR/rec_normalize -rascal "$INPUT" > "$NORMED"

# ----------------------------------------------------------------------------

# etape 1a : construction de $TYPE_FILE

sh $DIR/rec_type -build "$NORMED" "$TYPE_FILE"
# cat $TYPE_FILE ; exit

# ----------------------------------------------------------------------------

# etape 1b : construction de $SCRIPT

cat "$NORMED" |
awk -v "DIR=$DIR" -f $DIR/to_rascal_1.awk > $SCRIPT
# cat $SCRIPT ; exit

# ----------------------------------------------------------------------------

# etape 2 : traduction en Rascal

cat "$NORMED" |
awk -v "DIR=$DIR" -v "SCRIPT=$SCRIPT" \
    -v "ARGS_FILE=$ARGS_FILE" -v "TYPE_FILE=$TYPE_FILE" \
    -f $DIR/to_rascal_2.awk > $OUTPUT

rm "$NORMED" "$ARGS_FILE" "$TYPE_FILE" "$SCRIPT"


